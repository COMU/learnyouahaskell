

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Introduction - Learn You a Haskell for Great Good!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="http://learnyouahaskell.com/">
<style type="text/css">
	@import url('reset.css');
	@import url('style.css');
</style>
<link rel="shortcut icon" href="favicon.png" type="image/png">
        <link rel="next" href="starting-out">
<link type="text/css" rel="stylesheet" href="sh/Styles/SyntaxHighlighter.css">
<link href="rss.php" rel="alternate" type="application/rss+xml" title="Learn You a Haskell for Great Good! feed">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="starting-out" class="nxtlink">Starting Out</a>
                                            </li>
                </ul>
            </div>
        <h1>Giriş</h1> 
<a name="about-this-tutorial"></a>
<h2>Tutorial Hakkında</h2>
<p>
<em>Kendinize Haskell Öğretin</em>'e hoşgeldiniz! 
Eğer bunu okuyorsanız Haskell öğrenmek istiyor olma ihtimaliniz yüksek. Tam yerine geldiniz, fakat ilk önce tutorial hakkında biraz konuşalım.
</p>
<p>
Bunu yazmaya karar verdim çünkü Haskell hakkındaki bilgilerimi pekiştirmek istedim ve düşündüm ki bu bilgilerle Haskell'a yeni başlayan sizlere kendi persfektifimden yardım edebilirim.İnternette dolaşan Haskell ile ilgili bir kaç tutorial mevcut. Ben Haskell'a başlarken tek bir kaynaktan öğrenmedim. Haskell'ı birden fazla kaynak ve makale okuyarak öğrendim çünkü makalelerin herbiri bilgileri diğerinden farklı bir yolla açıklıyordu.Bu sayede tüm parçalar tek bir yerde birleşti.Yani burda yapmaya çalıştığım şey Haskell öğrenmeniz için yeni bir kaynak oluşturmak bu sayede hangi kaynağı daha çok sevdiğinizi belirleme şansınız epeyce yükselecek.
</p>
<img src="http://s3.amazonaws.com/lyah/bird.png" alt="bird" class="left" width="230" height="192">
<p>
Bu tutorialde zorunlu dillerde tecrübesi olan (C, C++, Java, Python &hellip;) fakat fonksiyonel programlamada (Haskell, ML, OCaml &hellip;) tecrübesi olmayan kişiler hedef alınmıştır. Ancak bahse girerim programlama tecrübeniz olmasa bile sizin gibi zeki bir insan Haskell'ı rahatça öğrenebilir.
</p>
<p>
Freenode ağındaki #haskell birşeyler sormak istediğinizde size yardım edebilecek harika bir yerdir.Ordaki insanlar Haskell'a yeni başlayanların halinden çok iyi anlar ve onlara yardım edebilecek kadar güvenilir ve sabırlıdır.
</p>
<p>
Haskell'ı tamamen kavramadan önce yaklaşık olarak 2 kez başarısız oldum çünkü Haskell bana çok tuhaf gelmişti. Fakat zor olan ilk kısmı geçtiğimde rahatça deryaya yelken açtım. Anlatmaya çalıştığım şey şu: Haskell en başta tuhaf gelse de gerçekten öğrenilmesi gereken çok yararlı bir dildir. Haskell'ı öğrenmek yeni bir programlama diline başlamak gibidir &mdash; yani eğlencelidir! sizi farklı düşünmeye zorlar, neyse şimdi diğer bölüme geçelim &hellip;
</p>

<a name="so-whats-haskell"></a><h2>Haskell Nedir?</h2>
<p>
<img src="http://s3.amazonaws.com/lyah/fx.png" alt="fx" class="right" width="150" height="146">
Haskell <em>tamamen fonksiyonel bir programlama dili</em> dir.
Zorunlu dillerde bilgisayara bir dizi girdi verirsiniz bu bilgisayar onları çalıştırır. Bunları çalıştırırken durum değiştirebilir. Mesela <span class="fixed">a</span> diye bir değişken yarattınız ve onu 5'e eşitlediniz, birkaç iş yaptıktan sonra a'yı tekrar değiştirdiniz. Yapıların kontrol akışını bir işlemi birkaç kez yapmak için elinizde tutuyorsunuz.Tamamen fonksiyonel programlamada bilgisayara ne yapması gerektiğini değil yapılacak işin <i>ne</i> olduğunu söylüyorsunuz. Bir sayının faktöriyeli 1'den o sayıya kadar olan sayıların çarpımıdır, bir sayı listesinin toplamı o sayı ve listedeki diğer sayıların toplamıdır, gibi örnekler verilebilir. Yapmak istediğiniz şeyi fonksiyonlarla anlatıyorsunuz. Aynı zamanda bir değişkeni bir değere atayıp sonra onu başka bir değere atayamazsınız. Eğer <span class="fixed">a</span> 'nın 5 olduğunu söylüyorsanız, sonrasında a'nın başka birşey olduğunu söyleyemezsiniz. Nesiniz siz, bir çeşit yalancı mı? Yani tamamen fonksiyonel programlamada fonksiyonun yan etkisi yoktur. Fonksiyonun yapabileceği tek şey birşeyleri hesaplayıp geriye değer döndürmektir. İlk bakışta bu biraz sınırlayıcı gözükebilir,fakat aslında bu bazı güzel sonuçlar doğurur: Eğer bir fonksiyon aynı parametreler ile iki kez çağırılırsa aynı sonucu döndüreceği kesindir. Buna referential transparency denir ve bu hem derleyicinin programın davranışını sorgulamasına izin verir hem de sizin bir fonksiyonu kolayca anlayıp doğrulamanızı (hatta ispatlamanızı) ve sonrasında basit fonksiyonları birbirine yapıştırarak daha karmaşık fonksiyonları yaratmanızı sağlar.
</p>
<p>
<img src="http://s3.amazonaws.com/lyah/lazy.png" class="right" alt="lazy" width="240" height="209">
Haskell <em>tembel</em> dir. Bu, ek bilgi verilmedikçe veya sonuç göstermeye zorlanmadıkça programın herhangi bir ek fonksiyon çalıştırmayacağı veya birşeyler geri döndürmeyeceği anlamına gelir. Bu programları bir dizi <em>veri dönüşümü</em> olarak algılamanıza izin verir. Bu aynı zamanda sonsuz veriye sahip yapılar oluşturmak gibi havalı şeylere de izin verir. Sabit bir sayı listeniz <span class="fixed">xs = [1,2,3,4,5,6,7,8]</span> ve listedeki her elemanı 2 ile çarpıp yeni listeyi oluşturan bir fonksiyonunuz <span class="fixed">doubleMe</span> var diyelim. Eğer listemizi 8 ile çarpmak isteseydik zorunlu dillerde şunu yapmak zorunda kalacaktık <span class="fixed">doubleMe(doubleMe(doubleMe(xs)))</span>, bu yüzden program büyük ihtimalle listenin içinden geçerek bir kopya oluşturur ve sonrasında onu geri döndürürdü. Sonra ise bu işlemi 2 kez daha yapar ve asıl sonucu döndürürdü. Tembel bir dilde <span class="fixed">doubleMe</span> fonksiyonunu herhangi bir sonuç göstermesini istemeden çağırmak programın size "Tamam bea yaparım bi' ara" demesiyle sonuçlanır. Fakat sonucu görmek istediğiniz anda <span class="fixed">doubleMe</span> ikinciye sonucu hemen şimdi istediğini söyler. İkinci de üçüncüye aynı emri verir ve üçüncü isteksizce 1 çarpı 2 yani sonuç olarak 2'yi döndürür. İkinci 2'yi alarak aynı işlemi yapar ve birinciye gönderir ve birinci asıl sonucu geri döndürür. Yani fonksiyon sadece ihtiyacınız olduğu zaman listenin içinden geçer.
</p>
<p>
<img src="http://s3.amazonaws.com/lyah/boat.png" class="right" alt="boat" width="160" height="153">
Haskell <em>statik olarak yazılan</em> bir dildir. Programınızı derlediğiniz zaman, derleyici kodun hangi kısmının numara hangi kısmının string olduğunu bilir. Bu birçok derleme hatasının ortaya çıkabilme ihtimalini doğurur. Bir string ile numarayı bir araya getirmeye çalışırsanız derleyici size sızlanacaktır. Haskell'ın çok iyi bir <em>tip tanımlayıcı</em> sı vardır. Bu her kodun tipini ayrı ayrı yazmamanızı sağlar. Eğer <span class="fixed">a = 5 + 4</span> derseniz, Haskell'a <span class="fixed">a</span> nın bir sayı olduğunu söylemenize gerek kalmaz, Haskell bunu kendi kendine çözebilir. Tip belirleyici aynı zamanda kodunuzun daha genel kullanılabilir olmasını sağlar. Eğer bir fonksiyon iki parametre alıp onları topluyorsa, gelen parametreler toplama işlemi gibi davrandığı sürece parametrelerin tipi önemsizdir.
</p>
<p>
Haskell <em>zarif ve özlü</em> bir dildir. Çünkü birçok yüksek seviye konsept kullanır, Haskell programları diğer zorunlu eşdeğer dillerin programlarından daha kısadır. Ve daha kısa olan programların bakımı daha kolaydır ve uzun olanlardan daha az bug bulundurur.
</p>
<p>
    Haskell <em>çok zeki olan</em> bazı(PhD'si bile olan) kişiler tarafından geliştirilmiştir. Haskell'ın geliştirilmesi 1987'de bir araştırma komitesi tarafından <em>kick-ass<em> bir dil yaratmak için başladı. 2003'te Haskell Report yayınlandı, böylece dil stable bir dil oldu.
</p>
<a name="what-you-need"></a><h2>Başlamak için nelere ihtiyacınız var?</h2>
<p>
Bir metin editörü ve bir Haskell derleyicisi. Büyük ihtimalle bir metin editörünüz vardır, o yüzden bunun üzerinde durmayacağız. Bu tutorial için GHC kullanacağız, GHC en çok kullanılan Haskell derleyicisidir. Başlamanın en iyi yolu <a href="http://hackage.haskell.org/platform/">Haskell Platform</a> unu indirmek olacaktır.
</p>
<p>
GHC bir Haskell script'ini (genel olarak .hs uzantılıdırlar) derleyebilir ve aynı zamanda GHC'nin scriptlerle etkileşimli bir şekilde etkileşmek için bir etkileşim modu vardır. Etkileşimli. Yüklediğiniz scriptlerden fonksiyon çağırabilirsiniz ve sonuçlar anında gösterilir. Öğrenmek için bu her değişiklik yaptıktan sonra derlemek ve çalıştırmaktan çok daha hızlı ve kolaydır. Etkileşimli mod komut satırına <span class="fixed">ghci</span> yazarak çalıştırılabilir. Örneğin <span class="fixed">myfunctions.hs</span> adlı bir dosya yaratıp içinde birkaç tane fonksiyon tanımladınız diyelim, bu fonksiyonları <span class="fixed">:l myfunctions</span> yazarak yükleyebilirsiniz ve sonra onlarla oynayabilirsiniz, temin edilen <span class="fixed">myfunctions.hs</span> dosyası <span class="fixed">ghci</span> nin çalıştırıldığı dizinle aynı yerden temin edilmektedir. Eğer .hs script'ini değiştirirseniz <span class="fixed">:l myfunctions</span> komutunu tekrar çalıştırın veya <span class="fixed">:r</span> komutunu çalıştırın, ki bu ikisi de aynı işi yapmaktadır çünkü <span class="fixed">:r</span> komutu o anki script'i çalıştırır. Genellikle birşeyleri kurcalarken bir .hs dosyası oluştururum fonksiyonlarla oynarım ve .hs dosyasını değiştiririm,tekrar yüklerim ve tekrar değiştiririm ve böyle gider. Zaten burda yapacağımız şey aynı zaman da budur.
</p>
                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="starting-out" class="nxtlink">Starting Out</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="shBrushHaskell.js"></script>
    <script type="text/javascript" src="shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = '/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
