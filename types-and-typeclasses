<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Types and Typeclasses - Learn You a Haskell for Great Good!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="http://learnyouahaskell.com/">
<style type="text/css">
	@import url('reset.css');
	@import url('style.css');
</style>
<link rel="shortcut icon" href="favicon.png" type="image/png">
        <link rel="prev" href="starting-out">
        <link rel="next" href="syntax-in-functions">
<link type="text/css" rel="stylesheet" href="sh/Styles/SyntaxHighlighter.css">
<link href="rss.php" rel="alternate" type="application/rss+xml" title="Learn You a Haskell for Great Good! feed">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                                        <a href="starting-out" class="prevlink">Starting Out</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="syntax-in-functions" class="nxtlink">Syntax in Functions</a>
                                            </li>
                </ul>
            </div>
        <h1>Tipler ve Tip-sınıfları</h1>
<a name="believe-the-type"></a><h2>Tipe inanmak</h2>
<img src="http://s3.amazonaws.com/lyah/cow.png" alt="moo" class="left" width="180" height="127">
<p>Daha önce de Haskell'ın sabit bir tip sistemi kullandığını söylemiştik. Her ifadenin tipi derleme zamanında bilinir, bu da kodun daha güvenli olmasını sağlar. Eğer boolean bir sayı tipini normal bir sayı ile bölmeye çalışırsanız program derlenmez bile. Bu daha iyi çünkü program çalışırken birden bozulmasındansa buna sebep olan hatayı derlenmeden önce görebilirsiniz. Haskell'da herşeyin bir tipi vardır bu yüzden derleyici sizin söylemek istediğiniz şeyi düşünmek için bayağı zaman ayırabilir.</p>
<p>Java ve Pascaldan farklı olmak üzere Haskell'ın bir tip belirleyicisi vardır. Eğer bir numara yazarsak Haskell'a bunun numara olduğunu söylememiz gerekmez, kendisi bu <i>çıkarımı</i> yapabilir, yani bu sayede bütün tipleri teker teker belirtmemiz gerekmez. Şu an Haskell'ın tip ile ilgili özelliklerini çok yüzeysel bir bakış ile inceledik. Tip sistemini iyi kavramamız ilerde bize çok yardımcı olacak.</p>
<p>Tip her ifadenin sahip olduğu etiket gibi birşeydir. Bize ifadenin hangi kategoride olduğunu söyler. <span class="fixed">True</span> ifadesi boolean, <span class="fixed">"hello"</span> ifadesi ise stringdir, vs.</p>
<p>Şimdi bazı ifadelerin tiplerini incelemek için GHCI kullanacağız. Bunu <span class="fixed">:t</span> komutunu kullanarak yapacağız, ki bu da ifade geçerliyse tipini öğrenmemizi sağlayacak. Hadi şunu bir döndürelim.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t 'a'
'a' :: Char
ghci&gt; :t True
True :: Bool
ghci&gt; :t "HELLO!"
"HELLO!" :: [Char]
ghci&gt; :t (True, 'a')
(True, 'a') :: (Bool, Char)
ghci&gt; :t 4 == 5
4 == 5 :: Bool
</pre>
<p>
<img src="http://s3.amazonaws.com/lyah/bomb.png" alt="bomb" class="right" width="171" height="144">
Burda <span class="fixed">:t</span> komutunun ifadelerden önce kullanıldığında ilk önce ifadeyi, sonra da <span class="fixed">::</span> işaretinden sonra ifadenin tipini yazdığını görüyoruz. <span class="fixed">::</span> burda " 'nın tipi" olarak kullanılmıştır. Bilinen tipler herzaman büyük harfle başlayarak açıklanır. <span class="fixed">'a'</span> görüldüğü gibi <span class="fixed">Char</span> tipindedir. Bunun <i>karakter</i> anlamına geldiğini anlamak zor olmasa gerek. <span class="fixed">True</span> ise <span class="fixed">Bool</span> tipindedir. Buraya kadar herşey güzel. Fakat bu da ne? <span class="fixed">"HELLO!"</span> 'nun tipini sorduğumuzda <span class="fixed">[Char]</span> döndürüyor. Köşeli parantezler bir listeyi ifade ediyor. Yani derleyici bunu bir çeşit <i>karakter listesi</i> olarak görüyor. Listelerden farklı olarak her demet uzunluğunun kendi tipi vardır. Yani <span class="fixed">(True, 'a')</span> 'nın tipi <span class="fixed">(Bool, Char)</span> 'dır, ayrıca <span class="fixed">('a','b','c')</span> 'nin tipi de <span class="fixed">(Char, Char, Char)</span> 'dır. <span class="fixed">4 == 5</span> herzaman <span class="fixed">False</span> döndürecektir yani tipi <span class="fixed">Bool</span> 'dur.
</p>
<p>
Fonksiyonların da tipleri vardır. Kendi fonksiyonumuzu yazarken açık tip deklarasyonu vermeyi seçebiliriz. Bu çok kısa fonksiyonları yazmadıkça iyi bir yöntem olarak kabul edilir. Önceki derste yaptığımız, bir string'i süzüp sadece büyük harfleri bırakan liste üretecini hatırlıyormusunuz? Onun tip deklarasyonuyla nasıl göründüğüne bakalım.
</p>
<pre name="code" class="haskell: hs">
removeNonUppercase :: [Char] -&gt; [Char]
removeNonUppercase st = [ c | c &lt;- st, c `elem` ['A'..'Z']] 
</pre>
<p>
<span class="fixed">removeNonUppercase</span> 'in tipi <span class="fixed">[Char] -&gt; [Char]</span> dır, bu stringten stringe olduğu anlamına gelir. Bunun sebebi parametre olarak string alması ve sonuç olarak da string döndürmesidir. <span class="fixed">[Char]</span> tipi <span class="fixed">String</span> ile eşanlamlıdır yani <span class="fixed">removeNonUppercase :: String -&gt; String</span> daha anlamlı olur. Bu fonksiyona tip deklarasyonu vermek istemedik çünkü derleyici bunun stringten stringe bir fonksiyon olduğunu kendi başına anlayabilir fakat yine yapalım dedik. Fakat birden fazla parametre alan bir fonksiyonun tipini nasıl yazabiliriz? İşte 3 integeri alıp toplayan basit bir fonksiyon örneği:
</p>
<pre name="code" class="haskell: hs">
addThree :: Int -&gt; Int -&gt; Int -&gt; Int
addThree x y z = x + y + z
</pre>
<p>Parametreler <span class="fixed">-&gt;</span> ile ayrılmıştır ve parametreler ile dönüş tipi arasında bir ayrım yoktur. Döndürülen değerin tipi deklarasyondaki son belirtilen tiptir diğer belirtilen tipler ise parametrelerdir. İleride hepsinin <span class="fixed">Int, Int, Int -&gt; Int</span> gibi bir ifade ile açık bir şekilde ayrılmak yerine yerine <span class="fixed">-&gt;</span> ile ayrıldığını göreceğiz.
</p>
<p>Eğer fonksiyonunuza hangi tip deklarasyonu vereceğinize karar vermekte zorlanıyorsanız fonksiyonu o olmadan yazıp sonrasında <span class="fixed">:t</span> ile kontrol edebilirsiniz. Fonksiyonlar da birer ifadedir bu yüzden <span class="fixed">:t</span> komutu onlarda da sorunsuz çalışır.</p>
<p>Yaygın bir şekilde kullanılan birkaç tip örneğine bakalım.</p>
<p>
<span class="label type">Int</span> 'in anlamı integerdir. Yani tamsayılar için kullanılır. <span class="fixed">7</span> bir <span class="fixed">Int</span> olabilir ama <span class="fixed">7.2</span> olamaz. <span class="fixed">Int</span> sınırlandırılmıştır, bu maximum ve minimum değeri olması gerektiği anlamına gelir. 32-bit makinelerde <span class="fixed">Int</span> 'in en yüksek değeri 2147483647 dir ve minimum değeri ise -2147483648 dir.
</p>
<p><span class="label type">Integer</span> eee &hellip; aynı zamanda integer anlamına gelir. Int ve integerin arasındaki fark integerin sınırı olmadığı için çok büyük rakamlarla uğraşırken kullanılabilmesidir. Büyük derken gerçekten büyük sayılardan bahsediyoruz. Fakat <span class="fixed">Int</span> daha verimlidir.
</p>
<pre name="code" class="haskell: hs">
factorial :: Integer -&gt; Integer
factorial n = product [1..n]
</pre>
<pre name="code" class="haskell: ghci">
ghci&gt; factorial 50
30414093201713378043612608166064768844377641568960512000000000000
</pre>
<p><span class="label type">Float</span> tek hassasiyetli gerçel sayıdır.</p>
<pre name="code" class="haskell: hs">
circumference :: Float -&gt; Float
circumference r = 2 * pi * r
</pre>
<pre name="code" class="haskell: ghci">
ghci&gt; circumference 4.0
25.132742
</pre>
<p><span class="label type">Double</span> de gerçel sayıdır,hem de tam çift hassasiyetli!</p>
<pre name="code" class="haskell: hs">
circumference' :: Double -&gt; Double
circumference' r = 2 * pi * r
</pre>
<pre name="code" class="haskell: ghci">
ghci&gt; circumference' 4.0
25.132741228718345
</pre>
<p>
<span class="label type">Bool</span> adından da anlaşıldığı gibi boolean tipidir. Yani sadece iki farklı değer alabilir: <span class="fixed">True</span> ve <span class="fixed">False</span>.
</p>
<p>
<span class="label type">Char</span> karakteri temsil eder ve çift tırnak ile ifade edilir. Bir karakter listesi string oluşturur.
</p>
<p>Demetler tiplerdir fakat uzunluklarına bağlı oldukları gibi bileşenlerin tiplerine de bağlıdırlar, yani teorik olarak sonsuz sayıda demet tipi vardır ki sonsuz da tutorialda kapsamak için biraz büyük bir sayıdır. Boş bir demetin <span class="label type">()</span> sahip olabildiği tek değer budur: <span class="fixed">()</span></p>
<a name="type-variables"></a><h2>Tip değişkenleri</h2>
<p>
<span class="fixed">head</span> fonksiyonunun tipi nedir sizce? <span class="fixed">head</span> bir liste alır ve listedeki ilk elemanı döndürür, yani acaba tipi ne olabilir? Hadi bakalım!
</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t head
head :: [a] -&gt; a
</pre>
<p>
<img src="http://s3.amazonaws.com/lyah/box.png" alt="box" class="left" width="130" height="93">
Hmmm! Bu <span class="fixed">a</span> da nesi? tip mi yoksa? Daha önce tiplerin büyük harfle başladığını belirtmiştik, yani o tip olamaz. Çünkü büyük harfle başlamıyor,o zaman o bir <em>tip değişkeni</em> 'dir. Bu <span class="fixed">a</span> 'nın herhangi bir tip olabileceğinin anlamına gelir. Bu diğer dillerdeki genelleyiciler gibidir, fakat Haskell'da bu çok daha kuvvetlidir çünkü bu genel bir tip davranışı göstermeyen fonksiyonları kolayca yazmamızı sağlar. Tip değişkenlerine sahip olan fonksiyonlara <em>polimorfik fonksiyonlar</em> denir.
</p>
<p>Tip değişkenlerinin isimlerinin birden fazla karaktere sahip olabilemesine rağmen genel olarak a, b, c, d gibi isimler veriyoruz &hellip;</p>
<p><span class="fixed">fst</span> 'yi hatırlıyor musunuz? Bir çiftin ilk bileşenini döndüren fonksiyon idi. Hadi tipine bakalım.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t fst
fst :: (a, b) -&gt; a
</pre>
<p>
<span class="fixed">fst</span> 'nin 2 öğeye sahip olan bir demetten ikilinin birinci bileşeni ile aynı tipte bir eleman döndürdüğünü görebiliyoruz. Bu neden <span class="fixed">fst</span> fonksiyonunu herhangi iki tip içeren bir ikilide kullanabildiğimizi açıklıyor. <span class="fixed">a</span> ve <span class="fixed">b</span> 'nin bu örnekte farklı olması her zaman farklı olmak zorunda olması zorunda olduğu anlamına gelmez. Bu sadece ilk bileşenin tipi ile dönüş tipinin aynı olduğunu belirtir.
</p>
<a name="typeclasses-101"></a><h2>Tip-sınıfları 101</h2>
<img src="http://s3.amazonaws.com/lyah/classes.png" alt="class" class="right" width="210" height="158">
<p>Tip-sınıfı bazı davranışları tanımlayan bir tür arayüzdür. Eğer bir tip, bir tip-sınıfının bir üyesi ise, o tip, içerisinde bulunduğu tip-sınıfının belirttiği davranışları destekler ve uygular. OOP'den gelen birçok insan tip-sınıflarını nesneye yönelik dillerdeki sınıflar ile karıştırıyor. Tip-sınıflarını bir tür java arayüzü olarak düşünebilirsiniz, fakat daha iyisi.
</p>
<p><span class="fixed">==</span> fonksiyonunun tip işareti nedir?</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t (==)
(==) :: (Eq a) =&gt; a -&gt; a -&gt; Bool
</pre>
<div class="hintbox"><em>Not</em>: eşitlik operatörü, <span class="fixed">==</span> bir fonksiyondur. Yani <span class="fixed">+</span>, <span class="fixed">*</span>, <span class="fixed">-</span>, <span class="fixed">/</span> de ve nerdeyse tüm operatörler de. Eğer bir fonksiyon sadece özel karakterlerden oluşuyorsa, infix fonksiyonu olarak varsayılır. Eğer tipini öğrenmek istiyorsak başka bir fonksiyona veririz veya prefix fonksiyonu olarak çağırırız, onu parantezlerle çevrelemez zorundayız.</div>
<p>İlginç. Burda yeni birşey görüyoruz, <span class="fixed">=&gt;</span> sembolü. <span class="fixed">=&gt;</span> sembolünden önceki herşey <em>sınıf sınırlaması</em> olarak bilinir. Önceki deklarasyonu şu şekilde okuyabiliriz: eşitlik fonksiyonu tipi aynı olan herhangi iki değeri alır ve <span class="fixed">Bool</span> döndürür. O iki değerin tipi <span class="fixed">Eq</span> sınıfının bir üyesi olmak zorundadır (bu sınıf sınırlandırmasıdır).</p>
<p><span class="fixed">Eq</span> tip-sınıfı eşitlik testi için bir arayüz sağlar. Kontrol edilen tipe ait olan iki değer de <span class="fixed">Eq</span> sınıfına üye olmalıdır. IO tipi (input ve output ile ilgilenen tipler) dışındaki tüm standart Haskell tipleri ve fonksiyonları <span class="fixed">Eq</span> tip-sınıfının üyesidir.</p>
<p>The <span class="fixed">elem</span> fonksiyonunun tipi <span class="fixed">(Eq a) =&gt; a -&gt; [a] -&gt; Bool</span> 'dur çünkü bir listede istediğimiz değerin olup olmadığını bulmak için <span class="fixed">==</span> kullanır.</p>
<p>Bazı temel tip-sınıfları:</p>
<p><span class="label class">Eq</span> eşitlik testini destekleyen tipler için kullanılır. Eğer bir tip için <span class="fixed">Eq</span> sınıf sınırlandırması varsa, tanımlanma sürecinde <span class="fixed">==</span> veya <span class="fixed">/=</span> kullanır. Az önce fonksiyonlar dışında bahsettiğimiz tüm tipler <span class="fixed">Eq</span> 'nun bir parçasıdır, yani eşitlik testi için kullanılabilirler.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; 5 == 5
True
ghci&gt; 5 /= 5
False
ghci&gt; 'a' == 'a'
True
ghci&gt; "Ho Ho" == "Ho Ho"
True
ghci&gt; 3.432 == 3.432
True
</pre>
<p>
<span class="label class">Ord</span> sıralamaya sahip tipler içindir.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t (&gt;)
(&gt;) :: (Ord a) =&gt; a -&gt; a -&gt; Bool
</pre>
<p>
Fonksiyonlar dışında işlediğimiz tüm tipler <span class="fixed">Ord</span> 'un bir parçasıdır. <span class="fixed">Ord</span> fonksiyonu <span class="fixed">&gt;</span>, <span class="fixed">&lt;</span>, <span class="fixed">&gt;=</span> ve <span class="fixed">&lt;=</span> gibi standart karşılaştırma fonksiyonlarını kapsar. <span class="fixed">compare</span> fonksiyonu aynı tipte iki <span class="fixed">Ord</span> üyesi alır ve bir sıralama döndürür. <span class="label type">Ordering</span> tipi <span class="fixed">GT</span>, <span class="fixed">LT</span> veya <span class="fixed">EQ</span> olabilir, bunlar sırasıyla <i>'dan büyük</i>, <i>'dan küçük</i> ve <i>sşittir</i> anlamına gelir. 
<p>Bir tipin <span class="fixed">Ord</span> üyesi olması için ilk önce prestijli ve özel <span class="fixed">Eq</span> klübünün üyesi olmalıdır.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; "Abrakadabra" &lt; "Zebra"
True
ghci&gt; "Abrakadabra" `compare` "Zebra"
LT
ghci&gt; 5 &gt;= 2
True
ghci&gt; 5 `compare` 3
GT
</pre>
<p><span class="label class">Show</span> 'un üyeleri string olarak gösterilebilir. Fonksiyonlar dışında işlediğimiz tüm tipler<span class="fixed">Show</span> 'un bir üyesidir. <span class="fixed">Show</span> tip-sınıfı ile en çok uğraşan fonksiyon <span class="fixed">show</span> 'dur. <span class="fixed">Show</span> 'un üyesi olan bir değer alır ve onu string olarak gösterir.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; show 3
"3"
ghci&gt; show 5.334
"5.334"
ghci&gt; show True
"True"
</pre>
<p><span class="label class">Read</span> ise <span class="fixed">Show</span> 'un tersi sayılır. <span class="fixed">read</span> fonksiyonu <span class="fixed">Read</span> 'ın üyesi olan bir string alır ve onu sayıya dönüştürür.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; read "True" || False
True
ghci&gt; read "8.2" + 3.8
12.0
ghci&gt; read "5" - 2
3
ghci&gt; read "[1,2,3,4]" ++ [3]
[1,2,3,4,3]
</pre>
<p>İşlediğimiz tüm tipler aynı zamanda bu tip-sınıfının da içindedir. Peki sadece <span class="fixed">read "4"</span> yazarsak ne olur?</p>
<pre name="code" class="haskell: ghci">
ghci&gt; read "4"
&lt;interactive&gt;:1:0:
    Ambiguous type variable `a' in the constraint:
      `Read a' arising from a use of `read' at &lt;interactive&gt;:1:0-7
    Probable fix: add a type signature that fixes these type variable(s)
</pre>
<p>GHCI 'nin bize burda söylediği şey neyi geri döndürmek istediğimizi bilmediğidir. Önceki <span class="fixed">read</span> fonksiyonunu kullandığımız yerlerde sonuç verebilecek işlemler yaptık. Bu yolla GHCI, <span class="fixed">read</span> 'ı kullanarak ne istediğimizi anlamış oldu. Eğer onu boolean olarak kullansaydık, <span class="fixed">Bool</span> döndürmesi gerektiğini anlardı. Hadi <span class="fixed">read</span> 'ın tip simgesine bakalım.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t read
read :: (Read a) =&gt; String -&gt; a
</pre>
<p>
Gördünüz mü? <span class="fixed">Read</span> 'ın parçası olan bir tip döndürdü fakat az önceki gibi kullanırsak hangi tip döndüreceğini bilemez. İşte bu yüzden <em>tip açıklamaları</em> nı kullanıyoruz. Tip açıklamalarını belirtilen ifadenin tipini açıklamak için kullanıyoruz. Bunu ifadenin sonuna <span class="fixed">::</span> ekledikten sonra bir tip yazarak yapabiliriz. İzleyin:
</p>
<pre name="code" class="haskell: ghci">
ghci&gt; read "5" :: Int
5
ghci&gt; read "5" :: Float
5.0
ghci&gt; (read "5" :: Float) * 4
20.0
ghci&gt; read "[1,2,3,4]" :: [Int]
[1,2,3,4]
ghci&gt; read "(3, 'a')" :: (Int, Char)
(3, 'a')
</pre>
<p>Derleyici çoğu ifadenin tipini tahmin ederek tanımlayabilir. Fakat bazen, derleyici <span class="fixed">read "5"</span> gibi bir ifade okuduğunda <span class="fixed">Int</span> veya <span class="fixed">Float</span> 'tan hangisini döndüreceğini bilemez. Hangi tipi döndüreceğini anlaması için Haskell'ın <span class="fixed">read "5"</span> ifadesini hesaplaması gerekir. Fakat Haskell'ın statik yazılan bir dil olduğunu düşünürsek kod derlenmeden önce bütün tiplerin ne olduğunu bilmelidir. Yani Haskell'a şunu söylemeliyiz: "Bu ifade şu tipe sahip olmalıdır, hani bilmiyorsan söyleyeyim!".</p>
<p><span class="label class">Enum</span> 'un üyeleri ardışık olarak sıralandırılabilir &mdash; ve numaralandırılabilir. <span class="fixed">Enum</span> tip-sınıfının ana avantajı liste menzilleriyle kullanılabilmesidir. Bunun içinde aynı zamanda ardıl ve öncel işlemleri için fonksiyonlar tanımlanmıştır, ardıl işlemi <span class="fixed">succ</span> fonksiyonu ile, öncel işlemi ise <span class="fixed">pred</span> fonksiyonu yapılabilir. Bu sınıfın içindeki tipler şunlardır: <span class="fixed">()</span>, <span class="fixed">Bool</span>, <span class="fixed">Char</span>, <span class="fixed">Ordering</span>, <span class="fixed">Int</span>, <span class="fixed">Integer</span>, <span class="fixed">Float</span> ve <span class="fixed">Double</span>.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; ['a'..'e']
"abcde"
ghci&gt; [LT .. GT]
[LT,EQ,GT]
ghci&gt; [3 .. 5]
[3,4,5]
ghci&gt; succ 'B'
'C'
</pre>
<p><span class="label class">Bounded</span> 'ın üyelerinin üst ve alt sınırları vardır.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; minBound :: Int
-2147483648
ghci&gt; maxBound :: Char
'\1114111'
ghci&gt; maxBound :: Bool
True
ghci&gt; minBound :: Bool
False
</pre>
<p><span class="fixed">minBound</span> ve <span class="fixed">maxBound</span> ilginçtir çünkü tipleri <span class="fixed">(Bounded a) =&gt; a</span> 'dır. Aslında baktığımız zaman onlar polimorfik sabitlerdir.</p>
<p>Tüm demetler de aslında <span class="fixed">Bounded</span> 'ın bir parçasıdır, eğer bileşenler de içindeyse tabii.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; maxBound :: (Bool, Int, Char)
(True,2147483647,'\1114111')
</pre>
<p><span class="label class">Num</span> sayısal bir tip-sınıfıdır. Bu sınıfın üyelerinin sayılar gibi davranma özelliği vardır. Hadi bir numaranın tipine bakalım.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t 20
20 :: (Num t) =&gt; t
</pre>
<p>Bu aslında bütün numaraların polimorfik sabit olduğunu gösteriyor. Onlar <span class="fixed">Num</span> tip-sınıfının üyesi olan herhangi bir tip gibi davranabilirler.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; 20 :: Int
20
ghci&gt; 20 :: Integer
20
ghci&gt; 20 :: Float
20.0
ghci&gt; 20 :: Double
20.0
</pre>
<p>Bu tipler <span class="fixed">Num</span> tip-sınıfının içinde olan tiplerdir. Eğer <span class="fixed">*</span> 'ın tipine bakarsak tüm sayıları kabul ettiğini görürüz.</p>
<pre name="code" class="haskell: ghci">
ghci&gt; :t (*)
(*) :: (Num a) =&gt; a -&gt; a -&gt; a
</pre>
<p>
Aynı tipten iki numara alır ve o tipe sahip bir numara döndürür. İşte bu yüzden <span class="fixed">5 * (6 :: Integer)</span> ifadesi düzgün çalışıp <span class="fixed">Integer</span> döndürmesine rağmen <span class="fixed">(5 :: Int) * (6 :: Integer)</span> işlemi bir tip hatasına sebep olur çünkü <span class="fixed">5</span> hem <span class="fixed">Integer</span> hem de <span class="fixed">Int</span> gibi davranabilir.
</p>
<p>Bir tipin <span class="fixed">Num</span> 'un üyesi olması için o tipin <span class="fixed">Show</span> ve <span class="fixed">Eq</span> tip-sınıflarının da üyesi olması gerekir.</p>
<p><span class="class label">Integral</span> is also a numeric typeclass. <span class="fixed">Num</span> includes all numbers, including real numbers and integral numbers, <span class="fixed">Integral</span> includes only integral (whole) numbers. In this typeclass are <span class="fixed">Int</span> and <span class="fixed">Integer</span>.</p>
<p><span class="class label">Floating</span> includes only floating point numbers, so <span class="fixed">Float</span> and <span class="fixed">Double</span>.</p>
<p>A very useful function for dealing with numbers is <span class="label function">fromIntegral</span>. It has a type declaration of <span class="fixed">fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b</span>. From its type signature we see that it takes an integral number and turns it into a more general number. That's useful when you want integral and floating point types to work together nicely. For instance, the <span class="fixed">length</span> function has a type declaration of <span class="fixed">length :: [a] -&gt; Int</span> instead of having a more general type of <span class="fixed">(Num b) =&gt; length :: [a] -&gt; b</span>. I think that's there for historical reasons or something, although in my opinion, it's pretty stupid. Anyway, if we try to get a length of a list and then add it to <span class="fixed">3.2</span>, we'll get an error because we tried to add together an <span class="fixed">Int</span> and a floating point number. So to get around this, we do <span class="fixed">fromIntegral (length [1,2,3,4]) + 3.2</span> and it all works out.</p>
<p>Notice that <span class="fixed">fromIntegral</span> has several class constraints in its type signature. That's completely valid and as you can see, the class constraints are separated by commas inside the parentheses.</p>

                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                                        <a href="starting-out" class="prevlink">Starting Out</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="syntax-in-functions" class="nxtlink">Syntax in Functions</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="shBrushHaskell.js"></script>
    <script type="text/javascript" src="shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = '/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
