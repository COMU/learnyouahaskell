<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Syntax in Functions - Learn You a Haskell for Great Good!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="http://learnyouahaskell.com/">
<style type="text/css">
	@import url('reset.css');
	@import url('style.css');
</style>
<link rel="shortcut icon" href="favicon.png" type="image/png">
        <link rel="prev" href="types-and-typeclasses">
        <link rel="next" href="recursion">
<link type="text/css" rel="stylesheet" href="sh/Styles/SyntaxHighlighter.css">
<link href="rss.php" rel="alternate" type="application/rss+xml" title="Learn You a Haskell for Great Good! feed">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                                        <a href="types-and-typeclasses" class="prevlink">Types and Typeclasses</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="recursion" class="nxtlink">Recursion</a>
                                            </li>
                </ul>
            </div>
        <h1 style="margin-left:-3px">Syntax in Functions</h1>
<a name="pattern-matching"></a><h2>Pattern matching</h2>
<img src="http://s3.amazonaws.com/lyah/pattern.png" alt="four!" class="right" width="162" height="250">
<p>Bu bölüm Haskell'in bazı havalı sözdizimsel yapılarını içeriyor. Bölüme örüntü eşleme ile giriş yapacağız. Örüntü eşleme, belirtilen örüntülerin bazı verilerinin uyumlu olup olmadığının kontrol edilmesi ve uygun ise bu örüntülere göre bileşenlerine ayrılmasına dayanmaktadır.</p>
<p>Fonksiyonları tanımlarken, farklı her örüntü için ayrı fonksiyon gövdesi tanımlayabilirsin. Bu basit ve okunaklı olan, düzenli bir kod yazmanı sağlar. Herhangi bir veri üzerinde örüntü eşleme yapabilirsiniz &mdash; sayılar, karakterler, listeler, demetler, vs. Hadi ona verdiğimiz sayının yedi olup olmadığını söyleyen son derece gereksiz bir fonksiyon üretelim.</p>
<pre name="code" class="haskell: hs">
lucky :: (Integral a) =&gt; a -&gt; String
lucky 7 = "LUCKY NUMBER SEVEN!"
lucky x = "Sorry, you're out of luck, pal!" </pre>
<p><span class="fixed">lucky</span> fonksiyonunu çağırdığın zaman, örüntü baştan sona kadar kontrol edilir. Örüntüye uygun eşleşme bulunduğunda ilişkili fonksiyon gövdesi kullanılır. Burada sadece gönderilen sayı 7 ise ilk örüntüye uyar. Eğer değilse, herhangi bir sayıyla eşleşen ikinci örüntü gerçekleşir ve <span class="fixed">x</span>'e bağlanır. Bu fonksiyon if ifadesi ile de sağlanabilir. Peki ama 1 ile 5 arasındaki sayıları söyleyen ve diğer sayılar için <span class="fixed">"Not between 1 and 5"</span> çıktısını veren bir fonksiyon yazmak istersek? Bu fonksiyonu örüntü eşleme kullanmadan yapmaya çalışsaydık, oldukça anlaşılmaz bir if then else ağacı oluştururduk. Ama, örüntü eşleme ile:</p>
<pre name="code" class="haskell: hs">
sayMe :: (Integral a) =&gt; a -&gt; String
sayMe 1 = "One!"
sayMe 2 = "Two!"
sayMe 3 = "Three!"
sayMe 4 = "Four!"
sayMe 5 = "Five!"
sayMe x = "Not between 1 and 5"
</pre>
<p>Eğer son örüntüyü (birçok şeyi kapsayan) en üste taşırsak, her zaman <span class="fixed">"Not between 1 and 5"</span> çıktısını vereceğini unutma. Çünkü bu örüntü bütün sayılarla eşleşir ve sonraki örüntülere geçme şansı olmaz. Böylece girdi sonraki örüntülerle kontrol de edilemez.</p>
<p>Bundan önce yaptığımız faktöryel fonksiyonunu hatırladın mı? <span class="fixed">n</span> sayısının faktöryelini <span class="fixed">product [1..n]</span> olarak tanımladık. Ayrıca faktöryel fonksiyonunu <i>özyinelemeli</i> olarak da tanımlayabilirdik, matematikte de genellikle böyle tanımlanır. 0'ın faktöriyelinin 1 olduğunu belirterek başlarız. Sonra pozitif herhangi bir sayının faktöryelinin o sayıdan bir önceki sayının faktöryeliyle çarpımı olduğunu belirtiriz. Bakalım Haskell şartlarında nasıl gözüküyor.</p>
<pre name="code" class="haskell: hs">
factorial :: (Integral a) =&gt; a -&gt; a
factorial 0 = 1
factorial n = n * factorial (n - 1)
</pre>
<p>
Burada ilk kez bir fonksiyonu özyinelemli olarak tanımladık. Özyineleme Haskell içerisinde önemlidir ve bu konuya ileride daha yakından bakacağız. Kısaca ne olduğunu belirtmek gerekirse, eğer 3 sayısının faktöryelini istersek, Haskell <span class="fixed">3 * factorial 2</span> ifadesini hesaplamaya çalışır. 2'nin faktöryeli <span class="fixed">2 * factorial 1</span> olduğundan şimdi karşımızda <span class="fixed">3 * (2 * factorial 1)</span> ifadesi var. <span class="fixed">factorial 1</span> de <span class="fixed">1 * factorial 0</span> ifadesine eşit olduğundan elimizde <span class="fixed">3 * (2 * (1 * factorial 0))</span> ifadesi var. Şimdi püf noktasına geldik &mdash; faktöryel 0 ifadesini 1 olarak tanımlamıştık çünkü bu örüntü herhangi bir şey ile eşleşebilen örüntüden hemen önce karşılar ve 1 döndürür. Sonuç olarak elimizdeki ifade bu hale geldi <span class="fixed">3 * (2 * (1 * 1))</span>. Eğer ikinci örüntüyü ilk örüntünün üstüne yazsaydık, 0 da dahil olmak üzere tüm sayılarla eşleşirdi ve hesaplamamız sona ermezdi. Bu  nedenle örüntü belirlerken sıralama önemlidir. Ve her zaman daha özgün olanı ilk daha genel olanı ise sonrasında belirtmek en iyisidir.</p>
<p>
Örüntü eşleme de eğer böyle bir fonksiyon tanımlarsak başarısız olabilir:
</p>
<pre name="code" class="haskell: hs">
charName :: Char -&gt; String
charName 'a' = "Albert"
charName 'b' = "Broseph"
charName 'c' = "Cecil"
</pre>
<p>ve sonra bizim tahmin etmediğimiz bir girdi ile çağırırsak, işte böyle olur:</p>
<pre name="code" class="haskell: ghci">
ghci&gt; charName 'a'
"Albert"
ghci&gt; charName 'b'
"Broseph"
ghci&gt; charName 'h'
"*** Exception: tut.hs:(53,0)-(55,21): Non-exhaustive patterns in function charName
</pre>
<p>
Haklı olarak örüntümüzün yetersiz olduğunu belirtiyor. Her zaman örüntü oluştururken tüm ihtimalleri içine alan bir örüntü eklemeliyiz. Böylece tahmin etmediğimiz bir girdi aldığımızda programımız çökmez.
</p>
<p>Örüntü eşleme aynı zamanda demetler için de kullanılabilir. Peki 2 boyutlu uzayda bulunan iki vektörü (bunlar ikili yapıdadır) alıp onları toplayan bir fonksiyon yapmak isteseydik ne olurdu? İki vektörü toplarken onların x ve y bileşenlerini kendi aralarında toplarız. Eğer örüntü eşleme bilmiyorsak bunu şu şekilde yaparız:</p>
<pre name="code" class="haskell: hs">
addVectors :: (Num a) =&gt; (a, a) -&gt; (a, a) -&gt; (a, a)
addVectors a b = (fst a + fst b, snd a + snd b)
</pre>
<p>Güzel, işe yaradı, ama bunu yapmak için daha iyi bir yol var. Hadi fonksiyonu örüntü eşleme kullanacak şekilde düzenleyelim.</p>
<pre name="code" class="haskell: hs">
addVectors :: (Num a) =&gt; (a, a) -&gt; (a, a) -&gt; (a, a)
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)
</pre>
<p>İşte bu kadar! Bu çok daha iyi. Dikkat ettiysen bu zaten hepsini kapsayan bir örüntü. <span class="fixed">addVectors</span> fonksiyonunun tipi (her iki durumda da) <span class="fixed">addVectors :: (Num a) =&gt; (a, a) -&gt; (a, a) - &gt; (a, a)</span>'dır, sonuç olarak fonksiyonun iki tane ikiliyi parametre almasını sağladık.</p>
<p><span class="fixed">fst</span> ve <span class="fixed">snd</span> demetlerin belli içeriklerini döndürüler. Peki ya üçlüler? Bunun için önceden sağlanmış fonksiyonlar yok ama kendi fonksiyonlarımızı yapabiliriz.</p>
<pre name="code" class="haskell: hs">
first :: (a, b, c) -&gt; a
first (x, _, _) = x

second :: (a, b, c) -&gt; b
second (_, y, _) = y

third :: (a, b, c) -&gt; c
third (_, _, z) = z
</pre>
<p><span class="fixed">_</span> işareti liste üreteçlerinde nasıl kullanıldıysa öyle kullanılır ve aynı şeyi ifade eder. Bu kısmın ne olduğunu önemsemediğimiz anlamına gelir, böylece biz de sadece <span class="fixed">_</span> yazarız.</p>
<p>Bu bana liste üreteçlerinde de örüntü eşleyebileceğini hatırlattı. Şuna bir bak:</p>
<pre name="code" class="haskell: ghci">
ghci&gt; let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]
ghci&gt; [a+b | (a,b) <- xs]
[4,7,6,8,11,4] </pre>
<p>
Bir örüntü eşleme başarısız olursa, sadece bir sonraki eleman ile devam eder.
</p>
<p>Ayrıca listelerin kendisi de örüntü eşlemede kullanılabilir. Boş liste ile <span class="fixed">[]</span> ifadesini ya da <span class="fixed">:</span> ve boş liste ile başlayan ifadeleri eşleyebilirsin. Ama <span class="fixed">[1,2,3]</span> ifadesi <span class="fixed">1:2:3:[]</span> ifadesinin sözdizimsel şekeri olduğunu bildiğin için önceki örüntüyü de kullanabilirsin. <span class="fixed">x:xs</span> gibi bir örüntü listenin başını <span class="fixed">x</span>'e bağlar ve listenin geri kalanı <span class="fixed">xs</span>'ye bağlanır. Bu işlem liste tek elemanlı olsa dahi gerçekleşir. Listenin ilk elemanı <span class="fixed">x</span>'e geriye kalan boş liste de <span class="fixed">xs</span>'ye bağlanır. </p>
<div class="hintbox"><em>Not</em>: <span class="fixed">x:xs</span> örüntüsü çok kullanılır, özellikle özyinelemeli fonksiyonlar ile. Ama <span class="fixed">:</span> içeren örüntüler sadece 1 ya da daha çok elemanlı listeler ile karşı eşlenebilir.</div>
<p>Eğer listenin ilk üç elemanını farklı değişkenlere ve geri kalanını da farklı bir değişkene bağlamak istersen, şunun gibi bir şey kullanabilirsin <span class="fixed">x:y:z:zs</span>. Sadece üç ve ya daha fazla elamanlı listeler ile eşleşecektir.</p>
<p>Şimdi listeler nasıl karşı eşlemede kullanılır biliyoruz. Hadi <span class="fixed">head</span> fonksiyonunu kendi istediğiz şekilde yeniden yazalım.</p>
<pre name="code" class="haskell: hs">
head' :: [a] -&gt; a
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x
</pre>
<p>İşe yarıyor mu, kontrol edelim:</p>
<pre name="code" class="haskell: ghci">
ghci&gt; head' [4,5,6]
4
ghci&gt; head' "Hello"
'H'
</pre>
<p>
Güzel! Eğer birçok değişkeni bağlamak istiyorsak (sadece bir tanesi <span class="fixed">_</span> olsa ve aslında hiç bağlanmasa bile), onları parantezler ile çevrelememiz gerektiğini unutma. Ayrıca kullandığımız <span class="fixed">error</span> fonksiyonuna dikkat et. Bu fonksiyon bir dizgi alır ve çalışma zamanı hatası verir. Ayrıca bu dizgi hata türü hakkında bilgi içerir. Bu programın çökmesine neden olacağından çok fazla kullanamak iyi değildir. Ama <span class="fixed">head</span> fonksiyonunu boş bir liste ile çağırmak anlamlı olmaz.
</p>
<p>Hadi bize bir listenin ilk birkaç elemanının ne olduğunu söyleyen gereksiz bir fonksiyon yazalım.</p>
<pre name="code" class="haskell: hs">
tell :: (Show a) =&gt; [a] -&gt; String
tell [] = "The list is empty"
tell (x:[]) = "The list has one element: " ++ show x
tell (x:y:[]) = "The list has two elements: " ++ show x ++ " and " ++ show y
tell (x:y:_) = "This list is long. The first two elements are: " ++ show x ++ " and " ++ show y
</pre>
<p>Bu fonksiyon güvenli çünkü boş, tek elemanlı, iki elemanlı ve iki elemandan fazla elemanlı listeler ile kullanılabiliyor. Unutma ki <span class="fixed">(x:[])</span> ve <span class="fixed">(x:y:[])</span> ifadelerini <span class="fixed">[x]</span> ve <span class="fixed">[x,y]</span> şeklinde yeniden yazabiliriz(çünkü bu onların sözdizimsel şeklidir ve bu ifadelerde paranteze ihtiyaç duyulmaz). <span class="fixed">(x:y:_)</span> ifadesini köşeli parantezler ile yeniden yazamayız çünkü bu durumda eleman sayısı 2 ve 2'den fazla elamanlı herhangi bir liste ile eşleşir.</p>
<p>Daha önceden kendi <span class="fixed">length</span> fonksiyonumuzu liste üreteçlerini kullanarak yazmaştık. Şimdi bunu örüntü eşleme ve biraz da özyineleme kullanarak yapacağız:</p>
<pre name="code" class="haskell: hs">
length' :: (Num b) =&gt; [a] -&gt; b
length' [] = 0
length' (_:xs) = 1 + length' xs</pre>
<p>Bu daha önce yazdığımız faktöryel fonsiyonuna benziyor. İlk önce sonucunu bildiğimiz bir girdiyi tanımladık &mdash; boş liste. Bu ayrıca uç durum olarak da bilinir. İkinci örüntüde listeyi baş ve kuyruk olmak üzere iki parçaya böldük. Listenin kuyruk uzunluğunun 1 fazlasının liste uzunluğuna eşit olduğunu belirttik. Liste başını <span class="fixed">_</span> eşleştirdik çünkü liste başının ne olduğuyla ilgilenmiyoruz. Ayrıca ikinci örüntüyü tüm olası liste örüntülerini kapsayacak şekilde oluşturduk. İlk örüntü boş listeler ile,  ikinci örüntü ise boş liste olmayan tüm listeler ile eşleşir.</p>
<p>Bakalım <span class="fixed">length'</span> fonksiyonunu <span class="fixed">"ham"</span> ile çağırırsak ne olacak. İlk olarak, boş liste olup olmadığını kontrol eder. Boş liste değilse, ikinci örüntüye geçer. İkinci örüntü ile eşleşir ve burada uzunluğun <span class="fixed">1 + length' "am"</span> olduğunu söyler, çünkü listeyi baş ve kuyruk olarak parçaladık ve baş parçasını attık. Tamam. <span class="fixed">"am"</span> parçasının <span class="fixed">length'</span> ile çağırılması da bir öncekine benzer olarak bu şekildedir <span class="fixed">1 + length' "m"</span>. Şimdi ifademiz bu hali aldı <span class="fixed">1 + (1 + length' "m")</span>. <span class="fixed">length' "m"</span> ifadesi şu ifade ile eşittir <span class="fixed">1 + length' ""</span> (ayrıca bu şekilde de yazılabilir <span class="fixed">1 + length' []</span>). Ve <span class="fixed">length' []</span> ifadesini <span class="fixed">0</span> olarak tanımlamıştık. Yani en sonunda şu ifadeyi elde ederiz <span class="fixed">1 + (1 + (1 + 0))</span>.</p>
<p>Hadi <span class="fixed">sum</span> fonksiyonu ile uğraşalım. Boş listenin elemanları toplamının 0 olduğunu biliyoruz. Bunu bir örüntüde kullanalım. Ayrıca bir listenin elemanları toplamının bir listenin başının ve geri kalan elemanlarının toplamı olarak düşünebiliriz. Bunu da örüntümüze eklersek, şunu elde ederiz:</p>
<pre name="code" class="haskell:nogutter:nocontrols:hs">
sum' :: (Num a) =&gt; [a] -&gt; a
sum' [] = 0
sum' (x:xs) = x + sum' xs
</pre>
<p><i>Örüntü olarak</i> adlandırılan bir şey daha var. Bunlar bir örüntüye göre işlemi sonlandırmak ve girdiyi bir isme bağlayarak tümü hakkında bir örnek tutmak için kullanışlı yollardır. Bunu örüntü başına bir isim ve <span class="fixed">@</span> koyarak yaparsın. Örneğin, <span class="fixed">xs@(x:y:ys)</span> örüntüsü. Bu örüntü <span class="fixed">x:y:ys</span> örüntüsü ile aynı şekilde eşleşecektir ama <span class="fixed">xs</span> ile tüm listeye kolayca ulaşabilirsin. Ayrıca fonksiyon gövdesinde <span class="fixed">x:y:ys</span> yazarak kendini tekrarlamazsın. İşte şipşak bir örnek:</p>
<pre name="code" class="haskell:nogutter:nocontrols:hs">
capital :: String -&gt; String
capital "" = "Empty string, whoops!"
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]
</pre>
<pre name="code" class="haskell:ghci">
ghci&gt; capital "Dracula"
"The first letter of Dracula is D"
</pre>
<p>Genellikle bu tip örüntüleri çok büyük örüntüler ile eşleşirken tüm yazdıklarımızı fonksiyon gövdesinde yeniden yazmak zorunda kalmamak için kullanırız.</p>
<p>Bir şey daha &mdash; örüntü eşlemesinde <span class="fixed">++</span> kullanamazsın. Eğer <span class="fixed">(xs ++ ys)</span> ifadesi ile örüntü eşlemeyi denersen, ilk ve ikinci listede neler olur? Bu pek de anlamlı değil. <span class="fixed">(xs ++ [x,y,z])</span> ya da <span class="fixed">(xs ++ [x])</span> ifadeleriyle eşleşme anlamlı olabilir, ama listelerin niteliğine uygun olmadığından bu şekilde yapamazsın.</p>
<a name="guards-guards"></a><h2>Nöbetçiler, nöbetçiler!</h2>
<img src="http://s3.amazonaws.com/lyah/guards.png" alt="guards" class="left" width="83" height="180">
<p>Örüntüler bir değerin bir kalıba uygun olduğuna emin olmanın ve onu (***deconstructing)işlemenin bir yoludur. Nöbetçiler ise bir değerin bazı (ya da birçok) niteliklerinin doğru mu yanlış mı olduğunu test etmek için kullanılırlar. Bu sana if ifadesi gibi gelebilir, zaten çok benzerler. Ama güzel yanı nöbetçiler çok fazla koşul kullandığında daha okunaklıdır ve örüntülerle de kolayca kullanılabilirler.</p>
<p>Sözdizimini anlatmak yerine, hemen nöbetçileri kullanarak bir fonksiyon yazalım. Seni <a href="http://en.wikipedia.org/wiki/Body_mass_index">BMI</a> (vücut kitle indeksi) değerine göre farklı şekillerde azarlayan basit bir fonksiyon yazalım. BMI değerin vücut ağırlığının, boy uzunluğunun karesine bölünmesi ile elde edilir. Eğer BMI değerin 18.5'ten küçükse zayıf, 18.5 ve 25 arasındaysa normal, 25 ve 30 arasında kilolu, 30'dan fazlaysa obez olarak kabul edilirsin. İşte fonksiyonumuz (şimdi BMI değerini hesaplamayacağız, sadece fonksiyon bu değeri alıyor ve seni azarlıyor)</p>
<pre name="code" class="haskell:hs">
bmiTell :: (RealFloat a) =&gt; a -&gt; String
bmiTell bmi
    | bmi &lt;= 18.5 = "You're underweight, you emo, you!"
    | bmi &lt;= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi &lt;= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise   = "You're a whale, congratulations!"
</pre>
<p>Nöbetçiler borularla gösterilirler. Boruları fonksiyon adları ve onların parametreleri izler. Genellikle, sağa doğru biraz girintili yazılır ve sıralanırlar. Bir nöbetçi temelde mantıksal bir ifadedir. Girdi <span class="fixed">True</span> olarak değerlendirilirse, bu kısma ilişkin fonksiyon gövdesi kullanılır. Eğer <span class="fixed">False</span> olarak değerlendirilirse, bir sonraki nöbetçi ile kontrol edilir ve böyle devam eder. Bu fonksiyonu <span class="fixed">24.3</span> ile çağırırsak, ilk olarak <span class="fixed">18.5</span>'ten küçük ya da ona eşit olup olmadığına bakılır. Eğer değilse, bir sonraki nöbetçiye geçilir. Bu örnekte kontrol süreci ikinci nöbetçi ile sonlanır ve ikinci dizgi döndürülür çünkü 24.3 25.0'dan küçüktür.</p>
<p>Bu, imperatif dillerde bulunan büyük if else ağaçlarını andırıyor. Sadece çok daha iyi ve okunaklı. Bazen bir problem böylesine soyut ve üstesinden gelemeyeceğin bir yolla tanımlanır ve sen de genellikle kaşlarını çatarsın. Nöbetçiler bunun için güzel bir alternatiftir.</p>
<p>Çoğu zaman, son nöbetçi <span class="fixed">otherwise</span> ifadesi ile tanımlanır. <span class="fixed">otherwise</span>, <span class="fixed">otherwise = True</span> şeklinde kolayca tanımlanır ve tüm girdileri yakalar. Bu örüntüler ile çok benzerdir, sadece örüntülerde girdi örüntü ile uyumlu olmalıdır ama nöbetçiler mantıksal olarak değerlendirir. Eğer bir fonksiyonun tüm nöbetçileri girdiyi <span class="fixed">False</span> olarak değerlendirirse (ve tüm değerleri sağlayan <span class="fixed">otherwise</span> nöbetçisini sunmadıysak), değerlendirme bir sonraki <em>örüntü</em>ye geçer. İşte nöbetçiler örüntüler ile böyle uyumlu bir şekilde kullanılırlar. Eğer uygun bir nöbetçi ve ya örüntü bulunamazsa, bir hata fırlatılır.</p>
<p>Tabi ki nöbetçileri fonksiyonlar ile kullanabiliriz. Bu fonksiyonlar isteğimiz çoklukta parametre alabilirler. Azarlayan fonksiyonun kullanıcıların kendi hesapladığı BMI değeri ile çağrılması yerine, bunun hesabını yapan fonksiyonu yazalım. Bu fonksiyon boy uzunluğu ve vücut ağırlığı parametrelerini alsın ve bizim için hesaplasın.</p>
<pre name="code" class="haskell:hs">
bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String
bmiTell weight height
    | weight / height ^ 2 &lt;= 18.5 = "You're underweight, you emo, you!"
    | weight / height ^ 2 &lt;= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | weight / height ^ 2 &lt;= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise                 = "You're a whale, congratulations!"
</pre>
<p>Bakalım şişman mıyım ...</p>
<pre name="code" class="haskell:ghci">
ghci&gt; bmiTell 85 1.90
"You're supposedly normal. Pffft, I bet you're ugly!"
</pre>
<p>Yaşasın! Şişman değilim! Ama Haskell bana az önce çirkin dedi. Neyse!</p>
<p>Fonksiyon adından ve parametrelerinden hemen sonra <span class="fixed">=</span> bulunmadığını aklından çıkarma. Burada çoğu acemi bu kullanımdan dolayı sözdizim hataları alır.</p>
<p>Bir başka kolay örnek de kendi yazacağımız <span class="fixed">max</span> fonksiyonudur. Hatırlarsan, birbiri ile karşılaştırılabilir iki girdi alır ve büyük olanı döndürür.</p>
<pre name="code" class="haskell:hs">
max' :: (Ord a) =&gt; a -&gt; a -&gt; a
max' a b 
    | a &gt; b     = a
    | otherwise = b
</pre>
<p>Nöbetçiler inline olarak da yazılabilirler. Ama ben bunu pek önermem çünkü çok kısa fonksiyonlarda bile okunaklılığı azaltır. Ama bir örnekle açıklamak gerekirse <span class="fixed">max'</span> fonksiyonunu şu şekilde yazabiliriz:</p>
<pre name="code" class="haskell:hs">
max' :: (Ord a) =&gt; a -&gt; a -&gt; a
max' a b | a &gt; b = a | otherwise = b
</pre>

<p>Öf! Artık pek de okunaklı değil! Devam edelim ve kendi <span class="fixed">compare</span> fonksiyonumuzu nöbetçileri kullanarak yazalım.
<pre name="code" class="haskell:hs">
myCompare :: (Ord a) =&gt; a -&gt; a -&gt; Ordering
a `myCompare` b
    | a &gt; b     = GT
    | a == b    = EQ
    | otherwise = LT
</pre>
<pre name="code" class="haskell:hs">
ghci&gt; 3 `myCompare` 2
GT
</pre>
<div class="hintbox"><em>Not:</em> Fonksiyonları sadece ters tırnak işareti ile infix olarak çağırırken kullanmayız. Ayrıca tanımlarken de ters tırnak kullanabiliriz. Bazen bu şekilde daha okunaklıdır.</div>
<a name="where"></a><h2>Where!?</h2>
<p>Bir önceki bölümde, BMI hesaplayan fonksiyonu tanımlamıştık ve işte şu şekilde azarlıyordu:</p>
<pre name="code" class="haskell:hs">
bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String
bmiTell weight height
    | weight / height ^ 2 &lt;= 18.5 = "You're underweight, you emo, you!"
    | weight / height ^ 2 &lt;= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | weight / height ^ 2 &lt;= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise                   = "You're a whale, congratulations!"
</pre>
<p>Dikkat ettiysen burada kendimizi üç defa tekrarladık. Kendimizi üç defa tekrarladık. Programlama yaparken kendimizi tekrarlamak (üç defa) demek about ***as desirable as getting kicked inna head. Aynı ifadeyi üç defa yeniden yazmak yerine, bir defa hesaplamamız, bunu bir isme bağlamamız ve bu ifade yerine bağladığımız ismi kullanmamız ideal olacaktır. Artık fonksiyonumuzu şu şekilde değiştirebiliriz:</p>
<pre name="code" class="haskell:hs">
bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String
bmiTell weight height
    | bmi &lt;= 18.5 = "You're underweight, you emo, you!"
    | bmi &lt;= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi &lt;= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise   = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2
</pre>
<p>Nöbetçilerden sonra <span class="fixed">where</span> anahtar kelimesini koyduk (genellikle borular kadar içeriden yazmak en iyisidir) ve sonra birkaç isim ve fonksiyon tanımladık. Bu isimler nöbetçiler tarafından görülür ve kendimizi tekrarlamamak avantajını bize kazandırır. Eğer BMI değerini bir nebze farklı hesaplamak istersek, fonksiyonu bir kez değiştirmemiz yeterli olur. Ayrıca bir şeylere isimler vererek okunabilirliği artırır  <span class="fixed">bmi</span> değişkenimiz gibi sadece bir kez hesaplatarak programımızı hızlandırır. Biraz bağımlı olup fonksiyonumuzu şu şekilde oluşturabiliriz:</p>
<pre name="code" class="haskell:hs">
bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String
bmiTell weight height
    | bmi &lt;= skinny = "You're underweight, you emo, you!"
    | bmi &lt;= normal = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi &lt;= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2
          skinny = 18.5
          normal = 25.0
          fat = 30.0
</pre>
<p>Bir fonksiyonun where kısmında tanımladığımız isimler sadece o fonksiyonda gözükürler, yani endişelenmemize gerek yok diğer fonksiyonların isim uzaylarında kirliliğe neden olmaz. Dikkat et, tüm isimler bir sütunda hizlanmış. Eğer uygun ve güzel bir şekilde hizalamazsak, Haskell tüm bu isimlerin aynı bloğa ait olup olmadığını anlayamaz ve kafası karışır.</p>
<p><i>where</i> bağlayıcıları farklı örüntülerin fonksiyon gövdeleri aralarında paylaşılmaz. Bir fonksiyonun birkaç örüntüsünün paylaşılan bir isme ulaşmasını istiyorsan, ismi global olarak tanımlamalısın.</p>
<p>Ayrıca where bağlayıcısını <em>örüntü eşlemesinde</em> de kullanabilirisin! Bir önceki fonksiyonumuzun where kısmını şu şekilde yeniden yazabiliridik:</p>
<pre name="code" class="haskell:hs">
    ...
    where bmi = weight / height ^ 2
          (skinny, normal, fat) = (18.5, 25.0, 30.0)
</pre>
<p>Hadi bir başka önemsiz where fonksiyonu yazalım. Bu fonksiyon bir ad ve bir soyad alsın ve baş harflerini geri döndürsün.</p>
<pre name="code" class="haskell:hs">
initials :: String -&gt; String -&gt; String
initials firstname lastname = [f] ++ ". " ++ [l] ++ "."
    where (f:_) = firstname
          (l:_) = lastname  
</pre>
<p>Bu örüntü eşlemeyi doğrudan fonksiyon parametresinde de yazabiliridik (bu daha kısa ve anlaşılır olur) ama bu sadece bu işlemin where baylayıcısı içerisinde de yapılabildiğini göstermektedir.</p>
<p>Where blokları içerisinde sabitler tanımlayabildiğimiz gibi fonksiyonlar da tanımlayabilriz. Sağlıklı programlama temamıza sağdık kalalım ve ağırlık-boy ikililerinden oluşan bir liste alıp BMI değerleri listesini döndüren bir fonksiyon oluşturalım.</p>
<pre name="code" class="haskell:hs">
calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]
calcBmis xs = [bmi w h | (w, h) &lt;- xs]
    where bmi weight height = weight / height ^ 2
</pre>
<p>İşte hepsi bu kadar! Bu örnekte <span class="fixed">bmi</span>'yi fonksiyon olarak tanıttık çünkü fonksiyonların parametrelerinden sadece bir kez BMI hesabı yapamayız. Bu şekilde tanıtmasaydık, listelerin fonksiyonlara aktarılmasını incelemek zorunda kalırdık ve her ikili için ayrı ayrı BMI'ler hesaplanırdı.</p>
<p><i>where</i> bağlayıcıları iç içe de olabilir. Bu fonksiyon yapımında kullanılan yaygın bir deyimdir. Yapılan bu fonksiyonlarda kullanılan <i>where</i> ifadesi içerisinde bazı yardımcı fonksiyonlar tanımlanır ve daha sonra bu fonksiyonlar içerisinde de yardımcı fonksiyonlar tanımlanır. Bu fonksiyonların da kendine ait <i>where</i> ifadeleri bulunur.</p>
<a name="let-it-be"></a><h2>Let it be</h2>
<p>
Very similar to where bindings are let bindings. Where bindings are a syntactic construct that let you bind to variables at the end of a function and the whole function can see them, including all the guards. Let bindings let you bind to variables anywhere and are expressions themselves, but are very local, so they don't span across guards. Just like any construct in Haskell that is used to bind values to names, let bindings can be used for pattern matching. Let's see them in action! This is how we could define a function that gives us a cylinder's surface area based on its height and radius:
</p>
<pre name="code" class="haskell:hs">
cylinder :: (RealFloat a) =&gt; a -&gt; a -&gt; a
cylinder r h =
    let sideArea = 2 * pi * r * h
        topArea = pi * r ^2
    in  sideArea + 2 * topArea
</pre>
<img src="http://s3.amazonaws.com/lyah/letitbe.png" alt="let it be" class="right" width="215" height="240">
<p>The form is <span class="fixed">let &lt;bindings&gt; in &lt;expression&gt;</span>. The names that you define in the <i>let</i> part are accessible to the expression after the <i>in</i> part. As you can see, we could have also defined this with a <i>where</i> binding. Notice that the names are also aligned in a single column. So what's the difference between the two? For now it just seems that <i>let</i> puts the bindings first and the expression that uses them later whereas <i>where</i> is the other way around.</p>
<p>The difference is that <i>let</i> bindings are expressions themselves. <i>where</i> bindings are just syntactic constructs. Remember when we did the if statement and it was explained that an if else statement is an expression and you can cram it in almost anywhere?</p>
<pre name="code" class="haskell:ghci">
ghci&gt; [if 5 &gt; 3 then "Woo" else "Boo", if 'a' &gt; 'b' then "Foo" else "Bar"]
["Woo", "Bar"]
ghci&gt; 4 * (if 10 &gt; 5 then 10 else 0) + 2
42
</pre>
<p>You can also do that with let bindings.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; 4 * (let a = 9 in a + 1) + 2
42
</pre>
<p>They can also be used to introduce functions in a local scope:</p>
<pre name="code" class="haskell:ghci">
ghci&gt; [let square x = x * x in (square 5, square 3, square 2)]
[(25,9,4)]
</pre>
<p>If we want to bind to several variables inline, we obviously can't align them at columns. That's why we can separate them with semicolons.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)
(6000000,"Hey there!")
</pre>
<p>You don't have to put a semicolon after the last binding but you can if you want. Like we said before, you can pattern match with <i>let</i> bindings. They're very useful for quickly dismantling a tuple into components and binding them to names and such.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; (let (a,b,c) = (1,2,3) in a+b+c) * 100
600
</pre>
<p>You can also put <i>let</i> bindings inside list comprehensions. Let's rewrite our previous example of calculating lists of weight-height pairs to use a <i>let</i> inside a list comprehension instead of defining an auxiliary function with a <i>where</i>.</p>
<pre name="code" class="haskell:hs">
calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]
calcBmis xs = [bmi | (w, h) &lt;- xs, let bmi = w / h ^ 2]
</pre>
<p>We include a <i>let</i> inside a list comprehension much like we would a predicate, only it doesn't filter the list, it only binds to names. The names defined in a <i>let</i> inside a list comprehension are visible to the output function (the part before the <span class="fixed">|</span>) and all predicates and sections that come after of the binding. So we could make our function return only the BMIs of fat people:</p>
<pre name="code" class="haskell:hs">
calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]
calcBmis xs = [bmi | (w, h) &lt;- xs, let bmi = w / h ^ 2, bmi &gt;= 25.0]
</pre>
<p>We can't use the <span class="fixed">bmi</span> name in the <span class="fixed">(w, h) &lt;- xs</span> part because it's defined prior to the <i>let</i> binding.</p> 
<p>We omitted the <i>in</i> part of the <i>let</i> binding when we used them in list comprehensions because the visibility of the names is already predefined there. However, we could use a <i>let in</i> binding in a predicate and the names defined would only be visible to that predicate. The <i>in</i> part can also be omitted when defining functions and constants directly in GHCi. If we do that, then the names will be visible throughout the entire interactive session.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; let zoot x y z = x * y + z
ghci&gt; zoot 3 9 2
29
ghci&gt; let boot x y z = x * y + z in boot 3 4 2
14
ghci&gt; boot
&lt;interactive&gt;:1:0: Not in scope: `boot'
</pre>
<p>If <i>let</i> bindings are so cool, why not use them all the time instead of <i>where</i> bindings, you ask? Well, since <i>let</i> bindings are expressions and are fairly local in their scope, they can't be used across guards. Some people prefer <i>where</i> bindings because the names come after the function they're being used in. That way, the function body is closer to its name and type declaration and to some that's more readable.</p>
<a name="case-expressions"></a><h2>Case expressions</h2>
<img src="http://s3.amazonaws.com/lyah/case.png" alt="case" class="right" width="185" height="164">
<p>Many imperative languages (C, C++, Java, etc.) have case syntax and if you've ever programmed in them, you probably know what it's about. It's about taking a variable and then executing blocks of code for specific values of that variable and then maybe including a catch-all block of code in case the variable has some value for which we didn't set up a case.</p>
<p>Haskell takes that concept and one-ups it. Like the name implies, case expressions are, well, expressions, much like if else expressions and <i>let</i> bindings. Not only can we evaluate expressions based on the possible cases of the value of a variable, we can also do pattern matching. Hmmm, taking a variable, pattern matching it, evaluating pieces of code based on its value, where have we heard this before? Oh yeah, pattern matching on parameters in function definitions! Well, that's actually just syntactic sugar for case expressions. These two pieces of code do the same thing and are interchangeable:</p>
<pre name="code" class="haskell:hs">
head' :: [a] -&gt; a
head' [] = error "No head for empty lists!"
head' (x:_) = x
</pre>
<pre name="code" class="haskell:hs">
head' :: [a] -&gt; a
head' xs = case xs of [] -&gt; error "No head for empty lists!"
                      (x:_) -&gt; x
</pre>
<p>As you can see, the syntax for case expressions is pretty simple:</p>
<pre name="code" class="haskell:hs">
case expression of pattern -&gt; result
                   pattern -&gt; result
                   pattern -&gt; result
                   ...
</pre>
<p><span class="fixed">expression</span> is matched against the patterns. The pattern matching action is the same as expected: the first pattern that matches the expression is used. If it falls through the whole case expression and no suitable pattern is found, a runtime error occurs.</p>
<p>Whereas pattern matching on function parameters can only be done when defining functions, case expressions can be used pretty much anywhere. For instance:</p>
<pre name="code" class="haskell:hs">
describeList :: [a] -&gt; String
describeList xs = "The list is " ++ case xs of [] -&gt; "empty."
                                               [x] -&gt; "a singleton list." 
                                               xs -&gt; "a longer list."
</pre>
<p>They are useful for pattern matching against something in the middle of an expression. Because pattern matching in function definitions is syntactic sugar for case expressions, we could have also defined this like so:</p>
<pre name="code" class="haskell:hs">
describeList :: [a] -&gt; String
describeList xs = "The list is " ++ what xs
    where what [] = "empty."
          what [x] = "a singleton list."
          what xs = "a longer list."
</pre>

                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                                        <a href="types-and-typeclasses" class="prevlink">Types and Typeclasses</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="recursion" class="nxtlink">Recursion</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="shBrushHaskell.js"></script>
    <script type="text/javascript" src="shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = '/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
