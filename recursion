<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Recursion - Learn You a Haskell for Great Good!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="http://learnyouahaskell.com/">
<style type="text/css">
	@import url('reset.css');
	@import url('style.css');
</style>
<link rel="shortcut icon" href="favicon.png" type="image/png">
        <link rel="prev" href="syntax-in-functions">
        <link rel="next" href="higher-order-functions">
<link type="text/css" rel="stylesheet" href="sh/Styles/SyntaxHighlighter.css">
<link href="rss.php" rel="alternate" type="application/rss+xml" title="Learn You a Haskell for Great Good! feed">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                                        <a href="syntax-in-functions" class="prevlink">Syntax in Functions</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="higher-order-functions" class="nxtlink">Higher Order Functions</a>
                                            </li>
                </ul>
            </div>
        <h1 style="margin-left:-2px">Özyineleme</h1>
<a name="hello-recursion"></a><h2>Özyinelemeye merhaba deyin!</h2>
<img src="http://s3.amazonaws.com/lyah/recursion.png" alt="SOVIET RUSSIA" class="left" width="250" height="179">
<p>Bir önceki bölümde özyinelemeden kısaca bahsetmiştik. Bu bölümde özyinelemeye daha derinden bakacağız ve bunun Haskell için neden bu kadar önemli olduğunu öğreneceğiz, ayrıca özyinelemeli düşünmek problemleri daha şık ve kısa bir şekilde çözmemizi sağlayacak. </p>
<p>Eğer özyinelemelinin hala ne olduğunu bilmiyorsanız bu cümleyi okuyun. Haha! Şaka yapıyordum! Özyineleme kendisini kendini tanımı içinde uygulayan fonksiyonlarla uğraşmanın bir yoludur. Matematikteki ifadeler genellikle özyinelemeli olarak verilir. Örneğin fibonacci dizisi özyinelemelidir. İlk önce fibonacci dizisinin ilk iki elemanını özyineleme olmadan belirleriz. Deriz ki <i>F(0) = 0</i> ve <i>F(1) = 1</i> olsun, bu da fibonacci dizisinin 0'ıncı ve 1'inci elemanı sırasıyla 0 ve 1'dir anlamına gelir. Sonra her bir doğal sayı için fibonacci sayısı kendinden önceki iki fibonacci sayısının toplamına eşittir deriz. Yani <i>F(n) = F(n-1) + F(n-2)</i>. Bu şekilde, <i>F(3)</i> de <i>F(2) + F(1)</i> olur, ki bu da <i>(F(1) + F(0)) + F(1)</i> 'e eşittir. Artık özyineleme olmadan belirtilen fibonacci sayılarına geldiğimize göre rahat bir şekilde <i>F(3)</i> işleminin sonucu 2'dir diyebiliriz. Özyinelemeli olarak belirtilen bir fonksiyonda özyineleme olmadan belirtilen bir ya da iki elemana (burdaki <i>F(0)</i> ve <i>F(1)</i> gibi) <em>sınır koşulu</em> denir ve bu fonksiyonunuzu sonlandırmak istiyorsanız önemlidir. Eğer <i>F(0)</i> ve <i>F(1)</i> 'in özyinelemesiz olarak ne olduğunu belirtmeseydik hiçbir sonuç alamazdık çünkü 0'a ulaştıktan sonra negatif sayılara doğru giderdik. Yani birden kendinizi <i>F(-2000)</i> eşittir <i>F(-2001) + F(-2002)</i> gibi ifadeleri hesaplarken bulurdunuz ve bu böyle giderdi!</p>
<p>Özyineleme Haskell için önemlidir çünkü diğer zorunlu dillerin aksine hesaplamaları birşeyi isterken <i>nasıl</i> isteyeceğinizi değil <i>ne</i> istediğinizi deklare ederek yaparsınız. İşte bu yüzden Haskell'da for veya while döngüsü bulunmaz, onun yerine birşeyin ne olduğunu tanımlarken özyineleme kullanıyoruz.</p>
<a name="maximum-awesome"></a><h2>Maksimum-dehşet verici über-müthiş ötesi Maximum</h2>
<p>The <span class="fixed">maximum</span> fonksiyonu içinde sıralanabilir elemanlar olan bir liste alır (örneğin <span class="fixed">Ord</span> tip-sınıfının üyeleri) ve listenin en büyüğünü döndürür. Bunu eski moda şekilde uyguladığınızı düşünün. Büyük ihtimalle maksimum değeri tutan bir değişken atardınız sonra tüm listeyi bir döngüye sokup her döngü işleminde maksimum değişkenini döngü işleminin sonucuna göre değiştirirdiniz. Döngü bittiğinde kalan son maximum değeri ise istediğimiz sonuç olurdu. Üf! Bu kadar basit bir algoritmayı ifade etmek için ne kadar fazla söz harcadık!</p>
<p>Şimdi ise nasıl özyinelemeli olarak deklare ederdik ona bakalım. İlk önce bir sınır koşulu koyalım ve tekiz bir listenin maksimumunun o listenin içindeki elemana eşit olduğunu belirtelim. Sonra daha uzun bir liste için listenin başının maksimumu kuyruğunun maksimumundan fazla ise listenin maksimumu başının maksimumudur deriz. Eğer listenin kuyruğunun maksimumu daha fazla ise o zaman listenin maksimumu kuyruğun maksimumuna eşittir deriz. İşte bu! Şimdi bunu Haskell'da uygulayalım.</p>
<pre name="code" class="haskell:hs">
maximum' :: (Ord a) =&gt; [a] -&gt; a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) 
    | x &gt; maxTail = x
    | otherwise = maxTail
    where maxTail = maximum' xs
</pre>
<p>Gördüğünüz üzre, pattern eşlendirme özyineleme ile müthiş ötesi harika bir şekilde çalışıyor! Zorunlu dillerin böyle bir eşlendirme özelliği yoktur, yani birsürü if else döngüsü yapmanız gerekir. Burda ise basitçe patternlerle işi hallediyoruz. Burda ilk sınır koşulu diyor ki eğer liste boşsa, iflas! Mantıklı, çünkü boş bir listenin maksimumunun mecvut olması çok ilginç bir şey olurdu gerçekten. İkinci pattern de aslında bir sınır koşulu ortaya koymaktadır. Der ki eğer tekil bir liste varsa, listenin içindeki tek elemanı döndür.</p>
<p>Üçüncü pattern ise aksiyonun başladığı noktadır. Pattern eşlendirmeyi bir listeyi baş ve kuyruk olmak üzere iki parçaya ayırmak için kullanıyoruz. Bu listelerde özyinelemeyi uygularken çok kullanılan bir deyimdir, o yüzden buna alışın. <span class="fixed">maxTail</span> 'i listenin kalan kısmının maksimumu olarak tanımlamak için bir <i>where</i> bağlayıcısı kullanıyoruz. Sonra başın listenin geri kalanının maksimumundan büyük olup olmadığını karşılaştırıyoruz. Eğer büyükse başı döndürüyoruz. Değilse listenin geri kalan kısmının maksimumunu döndürüyoruz.</p>
<p>Hadi bir dizi sayı alalım ve bu onların üzerinde nasıl çalışırdı ona bakalım: <span class="fixed">[2,5,1]</span>. Eğer <span class="fixed">maximum'</span> 'u onun üzerinde çağırırsak, ilk iki pattern uyuşmayacak. Üçüncüsü uyuşacak ve liste <span class="fixed">2</span> ve <span class="fixed">[5,1]</span> olmak üzere ikiye bölünecek. <i>where</i> cümleciği <span class="fixed">[5,1]</span> 'in maksimumunun ne olduğunu bilmek istiyor, bu yüzden o güzergâhı takip ediyoruz. Üçüncü patterni tekrar eşleştirir ve <span class="fixed">[5,1]</span> iki parçaya ayrılır: <span class="fixed">5</span> ve <span class="fixed">[1]</span>. <span class="fixed">where</span> cümleciği tekrar <span class="fixed">[1]</span> 'in maksimumunu bilmek istiyor. Sınır koşuluna bakıp <span class="fixed">1</span> döndürüyor. Sonunda! Bir aşama yukarı gidip <span class="fixed">5</span> ile <span class="fixed">[1]</span> 'in maksimumunu (ki o da <span class="fixed">1</span> 'e eşit oluyor) karşılaştırsak doğal olarak <span class="fixed">5</span> elde ediyoruz. Yani şimdi <span class="fixed">[5,1]</span> 'in maksimumunun <span class="fixed">5</span> olduğunu biliyoruz. Tekrar, bir aşama daha yukarı gidip <span class="fixed">2</span> ve <span class="fixed">[5,1]</span> 'e sahip olduğumuz aşamaya gidiyoruz. <span class="fixed">2</span> ile <span class="fixed">[5,1]</span> 'in maksimumunu karşılaştırıyoruz, ki o da <span class="fixed">5</span> oluyor, o zaman <span class="fixed">5</span> 'i seçiyoruz.</p>
<p>Bu fonksiyonu daha açık yazmanın bir yolu <span class="fixed">max</span> kullanmaktır. Hatırladığınız üzere, <span class="fixed">max</span> fonksiyonu iki sayıyı alıp büyük olanı döndürürdü. O zaman <span class="fixed">maximum'</span> 'u <span class="fixed">max</span> kullanarak nasıl yeniden yazabildiğimize bakalım:</p>
<pre name="code" class="haskell:hs">
maximum' :: (Ord a) =&gt; [a] -&gt; a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) = max x (maximum' xs)
</pre>
<p>Ne kadar zarif ama! Esasında, bir listenin maksimumu o listenin ilk elemanının maksimumu ve son elemanının maksimumudur.</p>
<img src="http://s3.amazonaws.com/lyah/maxs.png" alt="max" class="center" width="651" height="267">
<a name="a-few-more-recursive-functions"></a><h2>A few more recursive functions</h2>
<p>Now that we know how to generally think recursively, let's implement a few functions using recursion. First off, we'll implement <span class="fixed">replicate</span>. <span class="fixed">replicate</span> takes an <span class="fixed">Int</span> and some element and returns a list that has several repetitions of the same element. For instance, <span class="fixed">replicate 3 5</span> returns <span class="fixed">[5,5,5]</span>. Let's think about the edge condition. My guess is that the edge condition is 0 or less. If we try to replicate something zero times, it should return an empty list. Also for negative numbers, because it doesn't really make sense.</p>
<pre name="code" class="haskell:hs">
replicate' :: (Num i, Ord i) =&gt; i -&gt; a -&gt; [a]
replicate' n x
    | n <= 0    = []
    | otherwise = x:replicate' (n-1) x
</pre>
<p>We used guards here instead of patterns because we're testing for a boolean condition. If <span class="fixed">n</span> is less than or equal to 0, return an empty list. Otherwise return a list that has <span class="fixed">x</span> as the first element and then <span class="fixed">x</span> replicated n-1 times as the tail. Eventually, the <span class="fixed">(n-1)</span> part will cause our function to reach the edge condition.</p>
<div class="hintbox"><em>Note:</em> <span class="fixed">Num</span> is not a subclass of <span class="fixed">Ord</span>. That means that what constitutes for a number doesn't really have to adhere to an ordering. So that's why we have to specify both the <span class="fixed">Num</span> and <span class="fixed">Ord</span> class constraints when doing addition or subtraction and also comparison.</div>
<p>Next up, we'll implement <span class="fixed">take</span>. It takes a certain number of elements from a list. For instance, <span class="fixed">take 3 [5,4,3,2,1]</span> will return <span class="fixed">[5,4,3]</span>. If we try to take 0 or less elements from a list, we get an empty list. Also if we try to take anything from an empty list, we get an empty list. Notice that those are two edge conditions right there. So let's write that out:</p>
<pre name="code" class="haskell:hs">
take' :: (Num i, Ord i) =&gt; i -&gt; [a] -&gt; [a]
take' n _
    | n &lt;= 0   = []
take' _ []     = []
take' n (x:xs) = x : take' (n-1) xs
</pre>
<img src="http://s3.amazonaws.com/lyah/painter.png" alt="painter" class="right" width="350" height="276">
<p>The first pattern specifies that if we try to take a 0 or negative number of elements, we get an empty list. Notice that we're using <span class="fixed">_</span> to match the list because we don't really care what it is in this case. Also notice that we use a guard, but without an <span class="fixed">otherwise</span> part. That means that if <span class="fixed">n</span> turns out to be more than 0, the matching will fall through to the next pattern. The second pattern indicates that if we try to take anything from an empty list, we get an empty list. The third pattern breaks the list into a head and a tail. And then we state that taking <span class="fixed">n</span> elements from a list equals a list that has <span class="fixed">x</span> as the head and then a list that takes <span class="fixed">n-1</span> elements from the tail as a tail. Try using a piece of paper to write down how the evaluation would look like if we try to take, say, 3 from <span class="fixed">[4,3,2,1]</span>.</p>
<p><span class="fixed">reverse</span> simply reverses a list. Think about the edge condition. What is it? Come on ... it's the empty list! An empty list reversed equals the empty list itself. O-kay. What about the rest of it? Well, you could say that if we split a list to a head and a tail, the reversed list is equal to the reversed tail and then the head at the end.</p>
<pre name="code" class="haskell:hs">
reverse' :: [a] -&gt; [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]
</pre>
<p>There we go!</p>
<p>Because Haskell supports infinite lists, our recursion doesn't really have to have an edge condition. But if it doesn't have it, it will either keep churning at something infinitely or produce an infinite data structure, like an infinite list. The good thing about infinite lists though is that we can cut them where we want. <span class="fixed">repeat</span> takes an element and returns an infinite list that just has that element. A recursive implementation of that is really easy, watch.</p>
<pre name="code" class="haskell:hs">
repeat' :: a -&gt; [a]
repeat' x = x:repeat' x
</pre>
<p>Calling <span class="fixed">repeat 3</span> will give us a list that starts with <span class="fixed">3</span> and then has an infinite amount of 3's as a tail. So calling <span class="fixed">repeat 3</span> would evaluate like <span class="fixed">3:repeat 3</span>, which is <span class="fixed">3:(3:repeat 3)</span>, which is <span class="fixed">3:(3:(3:repeat 3))</span>, etc. <span class="fixed">repeat 3</span> will never finish evaluating, whereas <span class="fixed">take 5 (repeat 3)</span> will give us a list of five 3's. So essentially it's like doing <span class="fixed">replicate 5 3</span>.</p>
<p><span class="fixed">zip</span> takes two lists and zips them together. <span class="fixed">zip [1,2,3] [2,3]</span> returns <span class="fixed">[(1,2),(2,3)]</span>, because it truncates the longer list to match the length of the shorter one. How about if we zip something with an empty list? Well, we get an empty list back then. So there's our edge condition. However, <span class="fixed">zip</span> takes two lists as parameters, so there are actually two edge conditions.</p>
<pre name="code" class="haskell:hs">
zip' :: [a] -&gt; [b] -&gt; [(a,b)]
zip' _ [] = []
zip' [] _ = []
zip' (x:xs) (y:ys) = (x,y):zip' xs ys
</pre>
<p>First two patterns say that if the first list or second list is empty, we get an empty list. The third one says that two lists zipped are equal to pairing up their heads and then tacking on the zipped tails. Zipping <span class="fixed">[1,2,3]</span> and <span class="fixed">['a','b']</span> will eventually try to zip <span class="fixed">[3]</span> with <span class="fixed">[]</span>. The edge condition patterns kick in and so the result is <span class="fixed">(1,'a'):(2,'b'):[]</span>, which is exactly the same as <span class="fixed">[(1,'a'),(2,'b')]</span>.</p>
<p>Let's implement one more standard library function &mdash; <span class="fixed">elem</span>. It takes an element and a list and sees if that element is in the list. The edge condition, as is most of the times with lists, is the empty list. We know that an empty list contains no elements, so it certainly doesn't have the droids we're looking for.</p>
<pre name="code" class="haskell:hs">
elem' :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool
elem' a [] = False
elem' a (x:xs)
    | a == x    = True
    | otherwise = a `elem'` xs 
</pre>
<p>Pretty simple and expected. If the head isn't the element then we check the tail. If we reach an empty list, the result is <span class="fixed">False</span>.</p>
<a name="quick-sort"></a><h2>Quick, sort!</h2>
<p>We have a list of items that can be sorted. Their type is an instance of the <span class="fixed">Ord</span> typeclass. And now, we want to sort them! There's a very cool algoritm for sorting called quicksort. It's a very clever way of sorting items. While it takes upwards of 10 lines to implement quicksort in imperative languages, the implementation is much shorter and elegant in Haskell. Quicksort has become a sort of poster child for Haskell. Therefore, let's implement it here, even though implementing quicksort in Haskell is considered really cheesy because everyone does it to showcase how elegant Haskell is.</p>
<img src="http://s3.amazonaws.com/lyah/quickman.png" alt="quickman" class="left" width="180" height="235">
<p>So, the type signature is going to be <span class="fixed">quicksort :: (Ord a) =&gt; [a] -&gt; [a]</span>. No surprises there. The edge condition? Empty list, as is expected. A sorted empty list is an empty list. Now here comes the main algorithm: <em>a sorted list is a list that has all the values smaller than (or equal to) the head of the list in front (and those values are sorted), then comes the head of the list in the middle and then come all the values that are bigger than the head (they're also sorted).</em> Notice that we said <i>sorted</i> two times in this definition, so we'll probably have to make the recursive call twice! Also notice that we defined it using the verb <i>is</i> to define the algorithm instead of saying <i>do this, do that, then do that ...</i>. That's the beauty of functional programming! How are we going to filter the list so that we get only the elements smaller than the head of our list and only elements that are bigger? List comprehensions. So, let's dive in and define this function.</p>
<pre name="code" class="haskell:hs">
quicksort :: (Ord a) =&gt; [a] -&gt; [a]
quicksort [] = []
quicksort (x:xs) = 
    let smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x]
        biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]
    in  smallerSorted ++ [x] ++ biggerSorted
</pre>
<p>Let's give it a small test run to see if it appears to behave correctly.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; quicksort [10,2,5,3,1,6,7,4,2,3,4,8,9]
[1,2,2,3,3,4,4,5,6,7,8,9,10]
ghci&gt; quicksort "the quick brown fox jumps over the lazy dog"
"        abcdeeefghhijklmnoooopqrrsttuuvwxyz"
</pre>
<p>Booyah! That's what I'm talking about! So if we have, say <span class="fixed">[5,1,9,4,6,7,3]</span> and we want to sort it, this algorithm will first take the head, which is <span class="fixed">5</span> and then put it in the middle of two lists that are smaller and bigger than it. So at one point, you'll have <span class="fixed">[1,4,3] ++ [5] ++ [9,6,7]</span>. We know that once the list is sorted completely, the number <span class="fixed">5</span> will stay in the fourth place since there are 3 numbers lower than it and 3 numbers higher than it. Now, if we sort <span class="fixed">[1,4,3]</span> and <span class="fixed">[9,6,7]</span>, we have a sorted list! We sort the two lists using the same function. Eventually, we'll break it up so much that we reach empty lists and an empty list is already sorted in a way, by virtue of being empty. Here's an illustration:</p>
<img src="http://s3.amazonaws.com/lyah/quicksort.png" alt="quicksort" class="center" width="799" height="332">
<p>An element that is in place and won't move anymore is represented in <span style="color:#FF6600;font-weight:bold;">orange</span>. If you read them from left to right, you'll see the sorted list. Although we chose to compare all the elements to the heads, we could have used any element to compare against. In quicksort, an element that you compare against is called a pivot. They're in <span style="color:#009900;font-weight:bold">green</span> here. We chose the head because it's easy to get by pattern matching. The elements that are smaller than the pivot are <span style="color:#0f0;font-weight:bold">light green</span> and elements larger than the pivot are <span style="color:#030;font-weight:bold">dark green</span>. The yellowish gradient thing represents an application of quicksort.</p>
<a name="thinking-recursively"></a><h2>Thinking recursively</h2>
<p>We did quite a bit of recursion so far and as you've probably noticed, there's a pattern here. Usually you define an edge case and then you define a function that does something between some element and the function applied to the rest. It doesn't matter if it's a list, a tree or any other data structure. A sum is the first element of a list plus the sum of the rest of the list. A product of a list is the first element of the list times the product of the rest of the list. The length of a list is one plus the length of the tail of the list. Ekcetera, ekcetera ...<p>
<img src="http://s3.amazonaws.com/lyah/brain.png" alt="brain" class="left" width="250" height="219">
<p>Of course, these also have edge cases. Usually the edge case is some scenario where a recursive application doesn't make sense. When dealing with lists, the edge case is most often the empty list. If you're dealing with trees, the edge case is usually a node that doesn't have any children.</p>
<p>It's similar when you're dealing with numbers recursively. Usually it has to do with some number and the function applied to that number modified. We did the factorial function earlier and it's the product of a number and the factorial of that number minus one. Such a recursive application doesn't make sense with zero, because factorials are defined only for positive integers. Often the edge case value turns out to be an identity. The identity for multiplication is 1 because if you multiply something by 1, you get that something back. Also when doing sums of lists, we define the sum of an empty list as 0 and 0 is the identity for addition. In quicksort, the edge case is the empty list and the identity is also the empty list, because if you add an empty list to a list, you just get the original list back.</p>
<p>So when trying to think of a recursive way to solve a problem, try to think of when a recursive solution doesn't apply and see if you can use that as an edge case, think about identities and think about whether you'll break apart the parameters of the function (for instance, lists are usually broken into a head and a tail via pattern matching) and on which part you'll use the recursive call.</p>

                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                                        <a href="syntax-in-functions" class="prevlink">Syntax in Functions</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="higher-order-functions" class="nxtlink">Higher Order Functions</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="shBrushHaskell.js"></script>
    <script type="text/javascript" src="shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = '/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
