<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Recursion - Learn You a Haskell for Great Good!</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<base href="http://learnyouahaskell.com/">
<style type="text/css">
	@import url('reset.css');
	@import url('style.css');
</style>
<link rel="shortcut icon" href="favicon.png" type="image/png">
        <link rel="prev" href="syntax-in-functions">
        <link rel="next" href="higher-order-functions">
<link type="text/css" rel="stylesheet" href="sh/Styles/SyntaxHighlighter.css">
<link href="rss.php" rel="alternate" type="application/rss+xml" title="Learn You a Haskell for Great Good! feed">
</head>
<body class="introcontent">
<div class="bgwrapper">
    <div id="content">
                <div class="footdiv" style="margin-bottom:25px;">
                <ul>
                    <li style="text-align:left">
                                                        <a href="syntax-in-functions" class="prevlink">Syntax in Functions</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="higher-order-functions" class="nxtlink">Higher Order Functions</a>
                                            </li>
                </ul>
            </div>
        <h1 style="margin-left:-2px">Özyineleme</h1>
<a name="hello-recursion"></a><h2>Özyinelemeye merhaba deyin!</h2>
<img src="http://s3.amazonaws.com/lyah/recursion.png" alt="SOVIET RUSSIA" class="left" width="250" height="179">
<p>Bir önceki bölümde özyinelemeden kısaca bahsetmiştik. Bu bölümde özyinelemeye daha derinden bakacağız ve bunun Haskell için neden bu kadar önemli olduğunu öğreneceğiz, ayrıca özyinelemeli düşünmek problemleri daha şık ve kısa bir şekilde çözmemizi sağlayacak. </p>
<p>Eğer özyinelemelinin hala ne olduğunu bilmiyorsanız bu cümleyi okuyun. Haha! Şaka yapıyordum! Özyineleme kendisini kendini tanımı içinde uygulayan fonksiyonlarla uğraşmanın bir yoludur. Matematikteki ifadeler genellikle özyinelemeli olarak verilir. Örneğin fibonacci dizisi özyinelemelidir. İlk önce fibonacci dizisinin ilk iki elemanını özyineleme olmadan belirleriz. Deriz ki <i>F(0) = 0</i> ve <i>F(1) = 1</i> olsun, bu da fibonacci dizisinin 0'ıncı ve 1'inci elemanı sırasıyla 0 ve 1'dir anlamına gelir. Sonra her bir doğal sayı için fibonacci sayısı kendinden önceki iki fibonacci sayısının toplamına eşittir deriz. Yani <i>F(n) = F(n-1) + F(n-2)</i>. Bu şekilde, <i>F(3)</i> de <i>F(2) + F(1)</i> olur, ki bu da <i>(F(1) + F(0)) + F(1)</i> 'e eşittir. Artık özyineleme olmadan belirtilen fibonacci sayılarına geldiğimize göre rahat bir şekilde <i>F(3)</i> işleminin sonucu 2'dir diyebiliriz. Özyinelemeli olarak belirtilen bir fonksiyonda özyineleme olmadan belirtilen bir ya da iki elemana (burdaki <i>F(0)</i> ve <i>F(1)</i> gibi) <em>sınır koşulu</em> denir ve bu fonksiyonunuzu sonlandırmak istiyorsanız önemlidir. Eğer <i>F(0)</i> ve <i>F(1)</i> 'in özyinelemesiz olarak ne olduğunu belirtmeseydik hiçbir sonuç alamazdık çünkü 0'a ulaştıktan sonra negatif sayılara doğru giderdik. Yani birden kendinizi <i>F(-2000)</i> eşittir <i>F(-2001) + F(-2002)</i> gibi ifadeleri hesaplarken bulurdunuz ve bu böyle giderdi!</p>
<p>Özyineleme Haskell için önemlidir çünkü diğer zorunlu dillerin aksine hesaplamaları birşeyi isterken <i>nasıl</i> isteyeceğinizi değil <i>ne</i> istediğinizi deklare ederek yaparsınız. İşte bu yüzden Haskell'da for veya while döngüsü bulunmaz, onun yerine birşeyin ne olduğunu tanımlarken özyineleme kullanıyoruz.</p>
<a name="maximum-awesome"></a><h2>Maksimum-dehşet verici über-müthiş ötesi Maximum</h2>
<p>The <span class="fixed">maximum</span> fonksiyonu içinde sıralanabilir elemanlar olan bir liste alır (örneğin <span class="fixed">Ord</span> tip-sınıfının üyeleri) ve listenin en büyüğünü döndürür. Bunu eski moda şekilde uyguladığınızı düşünün. Büyük ihtimalle maksimum değeri tutan bir değişken atardınız sonra tüm listeyi bir döngüye sokup her döngü işleminde maksimum değişkenini döngü işleminin sonucuna göre değiştirirdiniz. Döngü bittiğinde kalan son maximum değeri ise istediğimiz sonuç olurdu. Üf! Bu kadar basit bir algoritmayı ifade etmek için ne kadar fazla söz harcadık!</p>
<p>Şimdi ise nasıl özyinelemeli olarak deklare ederdik ona bakalım. İlk önce bir sınır koşulu koyalım ve tekiz bir listenin maksimumunun o listenin içindeki elemana eşit olduğunu belirtelim. Sonra daha uzun bir liste için listenin başının maksimumu kuyruğunun maksimumundan fazla ise listenin maksimumu başının maksimumudur deriz. Eğer listenin kuyruğunun maksimumu daha fazla ise o zaman listenin maksimumu kuyruğun maksimumuna eşittir deriz. İşte bu! Şimdi bunu Haskell'da uygulayalım.</p>
<pre name="code" class="haskell:hs">
maximum' :: (Ord a) =&gt; [a] -&gt; a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) 
    | x &gt; maxTail = x
    | otherwise = maxTail
    where maxTail = maximum' xs
</pre>
<p>Gördüğünüz üzre, pattern eşlendirme özyineleme ile müthiş ötesi harika bir şekilde çalışıyor! Zorunlu dillerin böyle bir eşlendirme özelliği yoktur, yani birsürü if else döngüsü yapmanız gerekir. Burda ise basitçe patternlerle işi hallediyoruz. Burda ilk sınır koşulu diyor ki eğer liste boşsa, iflas! Mantıklı, çünkü boş bir listenin maksimumunun mecvut olması çok ilginç bir şey olurdu gerçekten. İkinci pattern de aslında bir sınır koşulu ortaya koymaktadır. Der ki eğer tekil bir liste varsa, listenin içindeki tek elemanı döndür.</p>
<p>Üçüncü pattern ise aksiyonun başladığı noktadır. Pattern eşlendirmeyi bir listeyi baş ve kuyruk olmak üzere iki parçaya ayırmak için kullanıyoruz. Bu listelerde özyinelemeyi uygularken çok kullanılan bir deyimdir, o yüzden buna alışın. <span class="fixed">maxTail</span> 'i listenin kalan kısmının maksimumu olarak tanımlamak için bir <i>where</i> bağlayıcısı kullanıyoruz. Sonra başın listenin geri kalanının maksimumundan büyük olup olmadığını karşılaştırıyoruz. Eğer büyükse başı döndürüyoruz. Değilse listenin geri kalan kısmının maksimumunu döndürüyoruz.</p>
<p>Hadi bir dizi sayı alalım ve bu onların üzerinde nasıl çalışırdı ona bakalım: <span class="fixed">[2,5,1]</span>. Eğer <span class="fixed">maximum'</span> 'u onun üzerinde çağırırsak, ilk iki pattern uyuşmayacak. Üçüncüsü uyuşacak ve liste <span class="fixed">2</span> ve <span class="fixed">[5,1]</span> olmak üzere ikiye bölünecek. <i>where</i> cümleciği <span class="fixed">[5,1]</span> 'in maksimumunun ne olduğunu bilmek istiyor, bu yüzden o güzergâhı takip ediyoruz. Üçüncü patterni tekrar eşleştirir ve <span class="fixed">[5,1]</span> iki parçaya ayrılır: <span class="fixed">5</span> ve <span class="fixed">[1]</span>. <span class="fixed">where</span> cümleciği tekrar <span class="fixed">[1]</span> 'in maksimumunu bilmek istiyor. Sınır koşuluna bakıp <span class="fixed">1</span> döndürüyor. Sonunda! Bir aşama yukarı gidip <span class="fixed">5</span> ile <span class="fixed">[1]</span> 'in maksimumunu (ki o da <span class="fixed">1</span> 'e eşit oluyor) karşılaştırsak doğal olarak <span class="fixed">5</span> elde ediyoruz. Yani şimdi <span class="fixed">[5,1]</span> 'in maksimumunun <span class="fixed">5</span> olduğunu biliyoruz. Tekrar, bir aşama daha yukarı gidip <span class="fixed">2</span> ve <span class="fixed">[5,1]</span> 'e sahip olduğumuz aşamaya gidiyoruz. <span class="fixed">2</span> ile <span class="fixed">[5,1]</span> 'in maksimumunu karşılaştırıyoruz, ki o da <span class="fixed">5</span> oluyor, o zaman <span class="fixed">5</span> 'i seçiyoruz.</p>
<p>Bu fonksiyonu daha açık yazmanın bir yolu <span class="fixed">max</span> kullanmaktır. Hatırladığınız üzere, <span class="fixed">max</span> fonksiyonu iki sayıyı alıp büyük olanı döndürürdü. O zaman <span class="fixed">maximum'</span> 'u <span class="fixed">max</span> kullanarak nasıl yeniden yazabildiğimize bakalım:</p>
<pre name="code" class="haskell:hs">
maximum' :: (Ord a) =&gt; [a] -&gt; a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) = max x (maximum' xs)
</pre>
<p>Ne kadar zarif ama! Esasında, bir listenin maksimumu o listenin ilk elemanının maksimumu ve son elemanının maksimumudur.</p>
<img src="http://s3.amazonaws.com/lyah/maxs.png" alt="max" class="center" width="651" height="267">
<a name="a-few-more-recursive-functions"></a><h2>Birkaç özyinelemeli fonksiyon daha</h2>
<p>Şimdi genel olarak özyinelemeli düşünmeyi anladık, şimdi bunu birkaç fonksiyon üzerinde uygulayalım. Önce <span class="fixed">replicate</span> fonksiyonuna uygulayacağız. <span class="fixed">replicate</span> fonksiyonu bir <span class="fixed">Int</span> ve bir eleman alıp aynı elemanı istendiği kadar döndürür. Örnek olarak, <span class="fixed">replicate 3 5</span> işlemi <span class="fixed">[5,5,5]</span> döndürür. Sınır koşulu hakkında düşünelim. Tahminimce sınır koşulu 0 veya daha azdır. Eğer birşeyi 0 kere döndürmeyi denersek, boş bir liste döndürür. Negatif sayılar zaten bu iş için birşey ifade etmiyor.</p>
<pre name="code" class="haskell:hs">
replicate' :: (Num i, Ord i) =&gt; i -&gt; a -&gt; [a]
replicate' n x
    | n <= 0    = []
    | otherwise = x:replicate' (n-1) x
</pre>
<p>Burda pattern yerine guardları kullandık çünkü bir boolean koşulunu test ediyoruz. Eğer <span class="fixed">n</span> 0'dan küçük veya eşitse, boş bir liste döndür. Aksi halde <span class="fixed">x</span> 'in birinci eleman olduğu bir liste döndür ve sonra <span class="fixed">x</span> 'i kuyruk olarak n-1 kere değiştir. Sonunda <span class="fixed">(n-1)</span> ifadesi fonksiyonun sınır koşuluna gitmesine neden olacak.</p>
<div class="hintbox"><em>Not:</em> <span class="fixed">Num</span>, <span class="fixed">Ord</span> 'un bir altsınıfı değildir. Bu sayıları teşkil eden bir ifadenin sıralamaya bağlı kalması gerekmediği anlamına gelir. İşte toplama, çıkarma ve karşılaştırma yaparken <span class="fixed">Num</span> ve <span class="fixed">Ord</span> sınıf sınırlandırıcılarını ayrı ayrı belirtmek zorundayız.</div>
<p>Sırada, <span class="fixed">take</span> fonksiyonuna bakacağız. Bir listenin içinden belli sayıda eleman almak için kullanılır. Örneğin, <span class="fixed">take 3 [5,4,3,2,1]</span> işlemi <span class="fixed">[5,4,3]</span> döndürür. Eğer listeden 0 veya daha az eleman almaya çalışırsak boş bir liste elde ederiz. Ayrıca boş bir listeden birşeyler almak istersek de boş bir liste elde ederiz. Hemen şurdaki iki sınır koşuluna bir göz atın. Hadi şimdi bunu yazmaya çalışalım:</p>
<pre name="code" class="haskell:hs">
take' :: (Num i, Ord i) =&gt; i -&gt; [a] -&gt; [a]
take' n _
    | n &lt;= 0   = []
take' _ []     = []
take' n (x:xs) = x : take' (n-1) xs
</pre>
<img src="http://s3.amazonaws.com/lyah/painter.png" alt="painter" class="right" width="350" height="276">
<p>İlk pattern listeden 0 veya daha az eleman almaya çalışırsak boş bir liste alacağımızı belirtir. Burda <span class="fixed">_</span> kullandığımıza dikkat edin, bunu şu anlık listenin ne olduğunu gerçekten önemsemediğimiz için yapıyoruz. Ayrıca <span class="fixed">otherwise</span> kısmı olmadan guard kullandığımıza da dikkat edin. Bu eğer <span class="fixed">n</span> 0'dan büyük olursa eşlendirme başarısız olacak anlamına gelir. İkinci pattern boş bir listeden birşeyler almaya çalışırsak boş bir liste elde edeceğimizi belirtir. Üçüncü pattern listeyi baş ve kuyruk olarak ikiye böler. Sonra söylüyoruz ki bir listeden <span class="fixed">n</span> tane eleman alırsak, baş olarak <span class="fixed">x</span> 'i alan bir liste ve kuyruk olarak kuyruktan <span class="fixed">n-1</span> tane eleman alan başka bir liste olmak üzere toplamda iki liste elde etmiş oluruz. Elinize bir kağıt kalem alın ve <span class="fixed">[4,3,2,1]</span> listesinden 3 tane eleman alan mekanizmanın gidişâtı gösteren işlemlerini yazın.</p>
<p><span class="fixed">reverse</span> bir listeyi tersine çevirir. Sınır koşulunu düşünün, ne olabilir? Hadi ama... boş bir liste tabii ki! Boş bir listenin tersi kendisine eşittir. Peki devamında ne yapmalıyız? Listeyi baş ve kuyruk olarak iki parçaya bölebiliriz. Ters çevirilen liste, ters çevirilen kuyruk ve başa eşit olur.</p>
<pre name="code" class="haskell:hs">
reverse' :: [a] -&gt; [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]
</pre>
<p>İşte gidiyoruz!</p>
<p>Haskell sonsuz listeleri desteklediği için özyinelememizin herhangi bir sınır koşuluna sahip olma zorunluluğu yok. Fakat sahip olmazsa ya biryerde sonsuza kadar çalkalanmaya başlar ya da sınırsız liste gibi sonsuz veri yapıları oluşturur. Sonsuz listelerin iyi tarafı ise onları istediğimiz yerde kesebilmemizdir. <span class="fixed">repeat</span> fonksiyonu bir eleman alır ve sadece o elemandan oluşan sonsuz bir liste oluşturur. Bunun özyinelemeli uygulaması çok kolaydır, izleyin.</p>
<pre name="code" class="haskell:hs">
repeat' :: a -&gt; [a]
repeat' x = x:repeat' x
</pre>
<p><span class="fixed">repeat 3</span> fonksiyonunu çağırmak bize <span class="fixed">3</span> ile başlayan ve sonsuz tane 3'e sahip bir kuyruğa sahip bir liste verir. Yani <span class="fixed">repeat 3</span> 'ü çağırmak aynı zamanda <span class="fixed">3:repeat 3</span> 'ü çağırmak anlamına gelir, ki o da <span class="fixed">3:(3:repeat 3)</span> 'ü çağırmakla aynıdır ve bu böyle gider. <span class="fixed">repeat 3</span> bu yüzden evrilmeyi hiçbir zaman bitirmeyecektir, oysa ki <span class="fixed">take 5 (repeat 3)</span> bize 5 tane 3 verir. Yani aslında bu <span class="fixed">replicate 5 3</span> yapmakla aynıdır.</p>
<p><span class="fixed">zip</span> iki liste alır ve onları sıkıştırır. <span class="fixed">zip [1,2,3] [2,3]</span> işlemi <span class="fixed">[(1,2),(2,3)]</span> döndürür, çünkü uzun liste ile kısanın boyunu eşitlemek için uzun olanı yuvarlar. Peki birşeyi boş bir liste ile sıkıştırmaya çalışırsak ne olur? O zaman boş bir liste geri alırız. O halde bu bizim sınır koşulumuzdur. Ancak, <span class="fixed">zip</span> parametre olarak iki liste aldığı için iki tane sınır koşulu olmalıdır.</p>
<pre name="code" class="haskell:hs">
zip' :: [a] -&gt; [b] -&gt; [(a,b)]
zip' _ [] = []
zip' [] _ = []
zip' (x:xs) (y:ys) = (x,y):zip' xs ys
</pre>
<p>İlk iki pattern der ki eğer iki listeden birisi boş ise geri döndürülecek liste de boş olmalıdır. Üçüncü pattern ise iki listenin sıkıştırılmış halinin iki listenin kafası eşleştirildikten sonra sıkıştırılmış kuyruklarının da tutturulmuş haline eşit olduğunu söylemektedir. <span class="fixed">[1,2,3]</span> ile <span class="fixed">['a','b']</span> 'yi sıkıştırmak sonunda <span class="fixed">[3]</span> ile <span class="fixed">[]</span> ifadelerini de sıkıştırmak anlamına gelir. İşte burda sınır koşulu uçan tekme atarak gelir sonucun <span class="fixed">(1,'a'):(2,'b'):[]</span> olmasını sağlar, ki bu da <span class="fixed">[(1,'a'),(2,'b')]</span> 'ye eşittir.</p>
<p>Hadi başka bir standart kütüphane fonksiyonunu daha uygulayalım &mdash; <span class="fixed">elem</span>. Bu fonksiyon bir liste ve bir eleman alır ve sonrasında elemanın listede olup olmadığını gösterir. Burda sınır koşulu çoğu listede olduğu gibi boş bir listedir. Biliyoruz ki boş bir liste hiçbir eleman içermez, o zaman bu liste kesinlikle aradığımız droidlere sahip değil.</p>
<pre name="code" class="haskell:hs">
elem' :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool
elem' a [] = False
elem' a (x:xs)
    | a == x    = True
    | otherwise = a `elem'` xs 
</pre>
<p>Beklenildiği kadar sade ve güzel. Eğer baş aradığımız eleman değilse kuyruğa bakıyoruz. Eğer boş bir listeye ulaşırsak <span class="fixed">False</span> döndürüyoruz.</p>
<a name="quick-sort"></a><h2>Quick, sort!</h2>
<p>We have a list of items that can be sorted. Their type is an instance of the <span class="fixed">Ord</span> typeclass. And now, we want to sort them! There's a very cool algoritm for sorting called quicksort. It's a very clever way of sorting items. While it takes upwards of 10 lines to implement quicksort in imperative languages, the implementation is much shorter and elegant in Haskell. Quicksort has become a sort of poster child for Haskell. Therefore, let's implement it here, even though implementing quicksort in Haskell is considered really cheesy because everyone does it to showcase how elegant Haskell is.</p>
<img src="http://s3.amazonaws.com/lyah/quickman.png" alt="quickman" class="left" width="180" height="235">
<p>So, the type signature is going to be <span class="fixed">quicksort :: (Ord a) =&gt; [a] -&gt; [a]</span>. No surprises there. The edge condition? Empty list, as is expected. A sorted empty list is an empty list. Now here comes the main algorithm: <em>a sorted list is a list that has all the values smaller than (or equal to) the head of the list in front (and those values are sorted), then comes the head of the list in the middle and then come all the values that are bigger than the head (they're also sorted).</em> Notice that we said <i>sorted</i> two times in this definition, so we'll probably have to make the recursive call twice! Also notice that we defined it using the verb <i>is</i> to define the algorithm instead of saying <i>do this, do that, then do that ...</i>. That's the beauty of functional programming! How are we going to filter the list so that we get only the elements smaller than the head of our list and only elements that are bigger? List comprehensions. So, let's dive in and define this function.</p>
<pre name="code" class="haskell:hs">
quicksort :: (Ord a) =&gt; [a] -&gt; [a]
quicksort [] = []
quicksort (x:xs) = 
    let smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x]
        biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]
    in  smallerSorted ++ [x] ++ biggerSorted
</pre>
<p>Let's give it a small test run to see if it appears to behave correctly.</p>
<pre name="code" class="haskell:ghci">
ghci&gt; quicksort [10,2,5,3,1,6,7,4,2,3,4,8,9]
[1,2,2,3,3,4,4,5,6,7,8,9,10]
ghci&gt; quicksort "the quick brown fox jumps over the lazy dog"
"        abcdeeefghhijklmnoooopqrrsttuuvwxyz"
</pre>
<p>Booyah! That's what I'm talking about! So if we have, say <span class="fixed">[5,1,9,4,6,7,3]</span> and we want to sort it, this algorithm will first take the head, which is <span class="fixed">5</span> and then put it in the middle of two lists that are smaller and bigger than it. So at one point, you'll have <span class="fixed">[1,4,3] ++ [5] ++ [9,6,7]</span>. We know that once the list is sorted completely, the number <span class="fixed">5</span> will stay in the fourth place since there are 3 numbers lower than it and 3 numbers higher than it. Now, if we sort <span class="fixed">[1,4,3]</span> and <span class="fixed">[9,6,7]</span>, we have a sorted list! We sort the two lists using the same function. Eventually, we'll break it up so much that we reach empty lists and an empty list is already sorted in a way, by virtue of being empty. Here's an illustration:</p>
<img src="http://s3.amazonaws.com/lyah/quicksort.png" alt="quicksort" class="center" width="799" height="332">
<p>An element that is in place and won't move anymore is represented in <span style="color:#FF6600;font-weight:bold;">orange</span>. If you read them from left to right, you'll see the sorted list. Although we chose to compare all the elements to the heads, we could have used any element to compare against. In quicksort, an element that you compare against is called a pivot. They're in <span style="color:#009900;font-weight:bold">green</span> here. We chose the head because it's easy to get by pattern matching. The elements that are smaller than the pivot are <span style="color:#0f0;font-weight:bold">light green</span> and elements larger than the pivot are <span style="color:#030;font-weight:bold">dark green</span>. The yellowish gradient thing represents an application of quicksort.</p>
<a name="thinking-recursively"></a><h2>Thinking recursively</h2>
<p>We did quite a bit of recursion so far and as you've probably noticed, there's a pattern here. Usually you define an edge case and then you define a function that does something between some element and the function applied to the rest. It doesn't matter if it's a list, a tree or any other data structure. A sum is the first element of a list plus the sum of the rest of the list. A product of a list is the first element of the list times the product of the rest of the list. The length of a list is one plus the length of the tail of the list. Ekcetera, ekcetera ...<p>
<img src="http://s3.amazonaws.com/lyah/brain.png" alt="brain" class="left" width="250" height="219">
<p>Of course, these also have edge cases. Usually the edge case is some scenario where a recursive application doesn't make sense. When dealing with lists, the edge case is most often the empty list. If you're dealing with trees, the edge case is usually a node that doesn't have any children.</p>
<p>It's similar when you're dealing with numbers recursively. Usually it has to do with some number and the function applied to that number modified. We did the factorial function earlier and it's the product of a number and the factorial of that number minus one. Such a recursive application doesn't make sense with zero, because factorials are defined only for positive integers. Often the edge case value turns out to be an identity. The identity for multiplication is 1 because if you multiply something by 1, you get that something back. Also when doing sums of lists, we define the sum of an empty list as 0 and 0 is the identity for addition. In quicksort, the edge case is the empty list and the identity is also the empty list, because if you add an empty list to a list, you just get the original list back.</p>
<p>So when trying to think of a recursive way to solve a problem, try to think of when a recursive solution doesn't apply and see if you can use that as an edge case, think about identities and think about whether you'll break apart the parameters of the function (for instance, lists are usually broken into a head and a tail via pattern matching) and on which part you'll use the recursive call.</p>

                <div class="footdiv">
                <ul>
                    <li style="text-align:left">
                                                        <a href="syntax-in-functions" class="prevlink">Syntax in Functions</a>
                                            </li>
                    <li style="text-align:center">
                        <a href="chapters">Table of contents</a>
                    </li>
                    <li style="text-align:right">
                                                        <a href="higher-order-functions" class="nxtlink">Higher Order Functions</a>
                                            </li>
                </ul>
            </div>
        </div>
    <script type="text/javascript" src="sh/Scripts/shCore.js"></script>
    <script type="text/javascript" src="shBrushHaskell.js"></script>
    <script type="text/javascript" src="shBrushPlain.js"></script>
    <script type="text/javascript">
    dp.SyntaxHighlighter.ClipboardSwf = '/sh/Scripts/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code', false, false, false, 1, false);
    </script>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-4461592-3");
pageTracker._trackPageview();
</script>
</body>
</html>
